
ITI45_Embedded.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003094  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00003094  00003128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800098  00800098  00003160  2**0
                  ALLOC
  3 .stab         00002814  00000000  00000000  00003160  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000135b  00000000  00000000  00005974  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a860  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a9c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ac4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b41b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__vector_1>
       8:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e9       	ldi	r30, 0x94	; 148
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 39       	cpi	r26, 0x98	; 152
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e9       	ldi	r26, 0x98	; 152
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 39       	cpi	r26, 0x99	; 153
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <main>
      8a:	0c 94 48 18 	jmp	0x3090	; 0x3090 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 11 18 	jmp	0x3022	; 0x3022 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2d 18 	jmp	0x305a	; 0x305a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1d 18 	jmp	0x303a	; 0x303a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1d 18 	jmp	0x303a	; 0x303a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 11 18 	jmp	0x3022	; 0x3022 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2d 18 	jmp	0x305a	; 0x305a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1d 18 	jmp	0x303a	; 0x303a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1d 18 	jmp	0x303a	; 0x303a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1d 18 	jmp	0x303a	; 0x303a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 21 18 	jmp	0x3042	; 0x3042 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 3d 18 	jmp	0x307a	; 0x307a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <EXI_INIT>:
#include "std_types.h"
#include "mem_map.h"
#include "utils.h"
#include "EXI_interface.h"

void EXI_INIT(uint8 EXI_NO,uint8 EXI_SC){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2a 97       	sbiw	r28, 0x0a	; 10
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	6a 83       	std	Y+2, r22	; 0x02
	switch(EXI_NO){
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	28 2f       	mov	r18, r24
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	3a 87       	std	Y+10, r19	; 0x0a
     b66:	29 87       	std	Y+9, r18	; 0x09
     b68:	89 85       	ldd	r24, Y+9	; 0x09
     b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b6c:	81 30       	cpi	r24, 0x01	; 1
     b6e:	91 05       	cpc	r25, r1
     b70:	b9 f1       	breq	.+110    	; 0xbe0 <EXI_INIT+0x9a>
     b72:	29 85       	ldd	r18, Y+9	; 0x09
     b74:	3a 85       	ldd	r19, Y+10	; 0x0a
     b76:	22 30       	cpi	r18, 0x02	; 2
     b78:	31 05       	cpc	r19, r1
     b7a:	31 f0       	breq	.+12     	; 0xb88 <EXI_INIT+0x42>
     b7c:	89 85       	ldd	r24, Y+9	; 0x09
     b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	09 f4       	brne	.+2      	; 0xb86 <EXI_INIT+0x40>
     b84:	88 c0       	rjmp	.+272    	; 0xc96 <EXI_INIT+0x150>
     b86:	e1 c0       	rjmp	.+450    	; 0xd4a <EXI_INIT+0x204>
	case INT2:
		switch(EXI_SC){
     b88:	8a 81       	ldd	r24, Y+2	; 0x02
     b8a:	28 2f       	mov	r18, r24
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	38 87       	std	Y+8, r19	; 0x08
     b90:	2f 83       	std	Y+7, r18	; 0x07
     b92:	8f 81       	ldd	r24, Y+7	; 0x07
     b94:	98 85       	ldd	r25, Y+8	; 0x08
     b96:	81 30       	cpi	r24, 0x01	; 1
     b98:	91 05       	cpc	r25, r1
     b9a:	09 f4       	brne	.+2      	; 0xb9e <EXI_INIT+0x58>
     b9c:	d6 c0       	rjmp	.+428    	; 0xd4a <EXI_INIT+0x204>
     b9e:	2f 81       	ldd	r18, Y+7	; 0x07
     ba0:	38 85       	ldd	r19, Y+8	; 0x08
     ba2:	22 30       	cpi	r18, 0x02	; 2
     ba4:	31 05       	cpc	r19, r1
     ba6:	0c f4       	brge	.+2      	; 0xbaa <EXI_INIT+0x64>
     ba8:	d0 c0       	rjmp	.+416    	; 0xd4a <EXI_INIT+0x204>
     baa:	8f 81       	ldd	r24, Y+7	; 0x07
     bac:	98 85       	ldd	r25, Y+8	; 0x08
     bae:	82 30       	cpi	r24, 0x02	; 2
     bb0:	91 05       	cpc	r25, r1
     bb2:	31 f0       	breq	.+12     	; 0xbc0 <EXI_INIT+0x7a>
     bb4:	2f 81       	ldd	r18, Y+7	; 0x07
     bb6:	38 85       	ldd	r19, Y+8	; 0x08
     bb8:	23 30       	cpi	r18, 0x03	; 3
     bba:	31 05       	cpc	r19, r1
     bbc:	49 f0       	breq	.+18     	; 0xbd0 <EXI_INIT+0x8a>
     bbe:	c5 c0       	rjmp	.+394    	; 0xd4a <EXI_INIT+0x204>
		case Low_Level:
			break;
		case Any_Logical_Level:
			break;
		case Falling_Edge:
			CLEAR_BIT(MCUCSR,6);
     bc0:	a4 e5       	ldi	r26, 0x54	; 84
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e4 e5       	ldi	r30, 0x54	; 84
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	8f 7b       	andi	r24, 0xBF	; 191
     bcc:	8c 93       	st	X, r24
     bce:	bd c0       	rjmp	.+378    	; 0xd4a <EXI_INIT+0x204>
			break;
		case RISING_Edge:
			SET_BIT(MCUCSR,6);
     bd0:	a4 e5       	ldi	r26, 0x54	; 84
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	e4 e5       	ldi	r30, 0x54	; 84
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	80 64       	ori	r24, 0x40	; 64
     bdc:	8c 93       	st	X, r24
     bde:	b5 c0       	rjmp	.+362    	; 0xd4a <EXI_INIT+0x204>
			break;
		}
		break;
		case INT1:
			switch(EXI_SC){
     be0:	8a 81       	ldd	r24, Y+2	; 0x02
     be2:	28 2f       	mov	r18, r24
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	3e 83       	std	Y+6, r19	; 0x06
     be8:	2d 83       	std	Y+5, r18	; 0x05
     bea:	8d 81       	ldd	r24, Y+5	; 0x05
     bec:	9e 81       	ldd	r25, Y+6	; 0x06
     bee:	81 30       	cpi	r24, 0x01	; 1
     bf0:	91 05       	cpc	r25, r1
     bf2:	21 f1       	breq	.+72     	; 0xc3c <EXI_INIT+0xf6>
     bf4:	2d 81       	ldd	r18, Y+5	; 0x05
     bf6:	3e 81       	ldd	r19, Y+6	; 0x06
     bf8:	22 30       	cpi	r18, 0x02	; 2
     bfa:	31 05       	cpc	r19, r1
     bfc:	2c f4       	brge	.+10     	; 0xc08 <EXI_INIT+0xc2>
     bfe:	8d 81       	ldd	r24, Y+5	; 0x05
     c00:	9e 81       	ldd	r25, Y+6	; 0x06
     c02:	00 97       	sbiw	r24, 0x00	; 0
     c04:	61 f0       	breq	.+24     	; 0xc1e <EXI_INIT+0xd8>
     c06:	a1 c0       	rjmp	.+322    	; 0xd4a <EXI_INIT+0x204>
     c08:	2d 81       	ldd	r18, Y+5	; 0x05
     c0a:	3e 81       	ldd	r19, Y+6	; 0x06
     c0c:	22 30       	cpi	r18, 0x02	; 2
     c0e:	31 05       	cpc	r19, r1
     c10:	21 f1       	breq	.+72     	; 0xc5a <EXI_INIT+0x114>
     c12:	8d 81       	ldd	r24, Y+5	; 0x05
     c14:	9e 81       	ldd	r25, Y+6	; 0x06
     c16:	83 30       	cpi	r24, 0x03	; 3
     c18:	91 05       	cpc	r25, r1
     c1a:	71 f1       	breq	.+92     	; 0xc78 <EXI_INIT+0x132>
     c1c:	96 c0       	rjmp	.+300    	; 0xd4a <EXI_INIT+0x204>
			case Low_Level:
				CLEAR_BIT(MCUCR,2);
     c1e:	a5 e5       	ldi	r26, 0x55	; 85
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e5 e5       	ldi	r30, 0x55	; 85
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	8b 7f       	andi	r24, 0xFB	; 251
     c2a:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR,3);
     c2c:	a5 e5       	ldi	r26, 0x55	; 85
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	e5 e5       	ldi	r30, 0x55	; 85
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	87 7f       	andi	r24, 0xF7	; 247
     c38:	8c 93       	st	X, r24
     c3a:	87 c0       	rjmp	.+270    	; 0xd4a <EXI_INIT+0x204>
				break;
			case Any_Logical_Level:
				CLEAR_BIT(MCUCR,2);
     c3c:	a5 e5       	ldi	r26, 0x55	; 85
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	e5 e5       	ldi	r30, 0x55	; 85
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	8b 7f       	andi	r24, 0xFB	; 251
     c48:	8c 93       	st	X, r24
				SET_BIT(MCUCR,3);
     c4a:	a5 e5       	ldi	r26, 0x55	; 85
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	e5 e5       	ldi	r30, 0x55	; 85
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	88 60       	ori	r24, 0x08	; 8
     c56:	8c 93       	st	X, r24
     c58:	78 c0       	rjmp	.+240    	; 0xd4a <EXI_INIT+0x204>
				break;
			case Falling_Edge:
				SET_BIT(MCUCR,2);
     c5a:	a5 e5       	ldi	r26, 0x55	; 85
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	e5 e5       	ldi	r30, 0x55	; 85
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	84 60       	ori	r24, 0x04	; 4
     c66:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR,3);
     c68:	a5 e5       	ldi	r26, 0x55	; 85
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e5 e5       	ldi	r30, 0x55	; 85
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	87 7f       	andi	r24, 0xF7	; 247
     c74:	8c 93       	st	X, r24
     c76:	69 c0       	rjmp	.+210    	; 0xd4a <EXI_INIT+0x204>
				break;
			case RISING_Edge:
				SET_BIT(MCUCR,2);
     c78:	a5 e5       	ldi	r26, 0x55	; 85
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	e5 e5       	ldi	r30, 0x55	; 85
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	84 60       	ori	r24, 0x04	; 4
     c84:	8c 93       	st	X, r24
				SET_BIT(MCUCR,3);
     c86:	a5 e5       	ldi	r26, 0x55	; 85
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e5 e5       	ldi	r30, 0x55	; 85
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	88 60       	ori	r24, 0x08	; 8
     c92:	8c 93       	st	X, r24
     c94:	5a c0       	rjmp	.+180    	; 0xd4a <EXI_INIT+0x204>
				break;
			}
			break;
			case INT0:
				switch(EXI_SC){
     c96:	8a 81       	ldd	r24, Y+2	; 0x02
     c98:	28 2f       	mov	r18, r24
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	3c 83       	std	Y+4, r19	; 0x04
     c9e:	2b 83       	std	Y+3, r18	; 0x03
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	9c 81       	ldd	r25, Y+4	; 0x04
     ca4:	81 30       	cpi	r24, 0x01	; 1
     ca6:	91 05       	cpc	r25, r1
     ca8:	21 f1       	breq	.+72     	; 0xcf2 <EXI_INIT+0x1ac>
     caa:	2b 81       	ldd	r18, Y+3	; 0x03
     cac:	3c 81       	ldd	r19, Y+4	; 0x04
     cae:	22 30       	cpi	r18, 0x02	; 2
     cb0:	31 05       	cpc	r19, r1
     cb2:	2c f4       	brge	.+10     	; 0xcbe <EXI_INIT+0x178>
     cb4:	8b 81       	ldd	r24, Y+3	; 0x03
     cb6:	9c 81       	ldd	r25, Y+4	; 0x04
     cb8:	00 97       	sbiw	r24, 0x00	; 0
     cba:	61 f0       	breq	.+24     	; 0xcd4 <EXI_INIT+0x18e>
     cbc:	46 c0       	rjmp	.+140    	; 0xd4a <EXI_INIT+0x204>
     cbe:	2b 81       	ldd	r18, Y+3	; 0x03
     cc0:	3c 81       	ldd	r19, Y+4	; 0x04
     cc2:	22 30       	cpi	r18, 0x02	; 2
     cc4:	31 05       	cpc	r19, r1
     cc6:	21 f1       	breq	.+72     	; 0xd10 <EXI_INIT+0x1ca>
     cc8:	8b 81       	ldd	r24, Y+3	; 0x03
     cca:	9c 81       	ldd	r25, Y+4	; 0x04
     ccc:	83 30       	cpi	r24, 0x03	; 3
     cce:	91 05       	cpc	r25, r1
     cd0:	71 f1       	breq	.+92     	; 0xd2e <EXI_INIT+0x1e8>
     cd2:	3b c0       	rjmp	.+118    	; 0xd4a <EXI_INIT+0x204>
				case Low_Level:
					CLEAR_BIT(MCUCR,0);
     cd4:	a5 e5       	ldi	r26, 0x55	; 85
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e5 e5       	ldi	r30, 0x55	; 85
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	8e 7f       	andi	r24, 0xFE	; 254
     ce0:	8c 93       	st	X, r24
					CLEAR_BIT(MCUCR,1);
     ce2:	a5 e5       	ldi	r26, 0x55	; 85
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e5 e5       	ldi	r30, 0x55	; 85
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	8d 7f       	andi	r24, 0xFD	; 253
     cee:	8c 93       	st	X, r24
     cf0:	2c c0       	rjmp	.+88     	; 0xd4a <EXI_INIT+0x204>
					break;
				case Any_Logical_Level:
					CLEAR_BIT(MCUCR,1);
     cf2:	a5 e5       	ldi	r26, 0x55	; 85
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e5 e5       	ldi	r30, 0x55	; 85
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	8d 7f       	andi	r24, 0xFD	; 253
     cfe:	8c 93       	st	X, r24
					SET_BIT(MCUCR,0);
     d00:	a5 e5       	ldi	r26, 0x55	; 85
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e5 e5       	ldi	r30, 0x55	; 85
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	81 60       	ori	r24, 0x01	; 1
     d0c:	8c 93       	st	X, r24
     d0e:	1d c0       	rjmp	.+58     	; 0xd4a <EXI_INIT+0x204>
					break;
				case Falling_Edge:
					SET_BIT(MCUCR,0);
     d10:	a5 e5       	ldi	r26, 0x55	; 85
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e5 e5       	ldi	r30, 0x55	; 85
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	81 60       	ori	r24, 0x01	; 1
     d1c:	8c 93       	st	X, r24
					CLEAR_BIT(MCUCR,1);
     d1e:	a5 e5       	ldi	r26, 0x55	; 85
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e5 e5       	ldi	r30, 0x55	; 85
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	8d 7f       	andi	r24, 0xFD	; 253
     d2a:	8c 93       	st	X, r24
     d2c:	0e c0       	rjmp	.+28     	; 0xd4a <EXI_INIT+0x204>
					break;
				case RISING_Edge:
					SET_BIT(MCUCR,0);
     d2e:	a5 e5       	ldi	r26, 0x55	; 85
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e5 e5       	ldi	r30, 0x55	; 85
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	81 60       	ori	r24, 0x01	; 1
     d3a:	8c 93       	st	X, r24
					SET_BIT(MCUCR,1);
     d3c:	a5 e5       	ldi	r26, 0x55	; 85
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e5 e5       	ldi	r30, 0x55	; 85
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	82 60       	ori	r24, 0x02	; 2
     d48:	8c 93       	st	X, r24
				}
				break;
				default:
					break;
	}
}
     d4a:	2a 96       	adiw	r28, 0x0a	; 10
     d4c:	0f b6       	in	r0, 0x3f	; 63
     d4e:	f8 94       	cli
     d50:	de bf       	out	0x3e, r29	; 62
     d52:	0f be       	out	0x3f, r0	; 63
     d54:	cd bf       	out	0x3d, r28	; 61
     d56:	cf 91       	pop	r28
     d58:	df 91       	pop	r29
     d5a:	08 95       	ret

00000d5c <EXI_ENABLE>:

void EXI_ENABLE(uint8 EXI_NO){
     d5c:	df 93       	push	r29
     d5e:	cf 93       	push	r28
     d60:	00 d0       	rcall	.+0      	; 0xd62 <EXI_ENABLE+0x6>
     d62:	0f 92       	push	r0
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
     d68:	89 83       	std	Y+1, r24	; 0x01
	switch(EXI_NO){
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	3b 83       	std	Y+3, r19	; 0x03
     d72:	2a 83       	std	Y+2, r18	; 0x02
     d74:	8a 81       	ldd	r24, Y+2	; 0x02
     d76:	9b 81       	ldd	r25, Y+3	; 0x03
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	91 05       	cpc	r25, r1
     d7c:	91 f0       	breq	.+36     	; 0xda2 <EXI_ENABLE+0x46>
     d7e:	2a 81       	ldd	r18, Y+2	; 0x02
     d80:	3b 81       	ldd	r19, Y+3	; 0x03
     d82:	22 30       	cpi	r18, 0x02	; 2
     d84:	31 05       	cpc	r19, r1
     d86:	29 f0       	breq	.+10     	; 0xd92 <EXI_ENABLE+0x36>
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	9b 81       	ldd	r25, Y+3	; 0x03
     d8c:	00 97       	sbiw	r24, 0x00	; 0
     d8e:	89 f0       	breq	.+34     	; 0xdb2 <EXI_ENABLE+0x56>
     d90:	17 c0       	rjmp	.+46     	; 0xdc0 <EXI_ENABLE+0x64>
	case INT2:
		SET_BIT(GICR,5);
     d92:	ab e5       	ldi	r26, 0x5B	; 91
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	eb e5       	ldi	r30, 0x5B	; 91
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	80 62       	ori	r24, 0x20	; 32
     d9e:	8c 93       	st	X, r24
     da0:	0f c0       	rjmp	.+30     	; 0xdc0 <EXI_ENABLE+0x64>
		break;
	case INT1:
		SET_BIT(GICR,7);
     da2:	ab e5       	ldi	r26, 0x5B	; 91
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	eb e5       	ldi	r30, 0x5B	; 91
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	80 68       	ori	r24, 0x80	; 128
     dae:	8c 93       	st	X, r24
     db0:	07 c0       	rjmp	.+14     	; 0xdc0 <EXI_ENABLE+0x64>
		break;
	case INT0:
		SET_BIT(GICR,6);
     db2:	ab e5       	ldi	r26, 0x5B	; 91
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e5       	ldi	r30, 0x5B	; 91
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	80 64       	ori	r24, 0x40	; 64
     dbe:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
     dc0:	0f 90       	pop	r0
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	cf 91       	pop	r28
     dc8:	df 91       	pop	r29
     dca:	08 95       	ret

00000dcc <EXI_DISABLE>:

void EXI_DISABLE(uint8 EXI_NO){
     dcc:	df 93       	push	r29
     dce:	cf 93       	push	r28
     dd0:	00 d0       	rcall	.+0      	; 0xdd2 <EXI_DISABLE+0x6>
     dd2:	0f 92       	push	r0
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
     dd8:	89 83       	std	Y+1, r24	; 0x01
	switch(EXI_NO){
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	3b 83       	std	Y+3, r19	; 0x03
     de2:	2a 83       	std	Y+2, r18	; 0x02
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	9b 81       	ldd	r25, Y+3	; 0x03
     de8:	81 30       	cpi	r24, 0x01	; 1
     dea:	91 05       	cpc	r25, r1
     dec:	91 f0       	breq	.+36     	; 0xe12 <EXI_DISABLE+0x46>
     dee:	2a 81       	ldd	r18, Y+2	; 0x02
     df0:	3b 81       	ldd	r19, Y+3	; 0x03
     df2:	22 30       	cpi	r18, 0x02	; 2
     df4:	31 05       	cpc	r19, r1
     df6:	29 f0       	breq	.+10     	; 0xe02 <EXI_DISABLE+0x36>
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	9b 81       	ldd	r25, Y+3	; 0x03
     dfc:	00 97       	sbiw	r24, 0x00	; 0
     dfe:	89 f0       	breq	.+34     	; 0xe22 <EXI_DISABLE+0x56>
     e00:	17 c0       	rjmp	.+46     	; 0xe30 <EXI_DISABLE+0x64>
	case INT2:
		CLEAR_BIT(GICR,5);
     e02:	ab e5       	ldi	r26, 0x5B	; 91
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	eb e5       	ldi	r30, 0x5B	; 91
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	8f 7d       	andi	r24, 0xDF	; 223
     e0e:	8c 93       	st	X, r24
     e10:	0f c0       	rjmp	.+30     	; 0xe30 <EXI_DISABLE+0x64>
		break;
	case INT1:
		CLEAR_BIT(GICR,5);
     e12:	ab e5       	ldi	r26, 0x5B	; 91
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	eb e5       	ldi	r30, 0x5B	; 91
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	8f 7d       	andi	r24, 0xDF	; 223
     e1e:	8c 93       	st	X, r24
     e20:	07 c0       	rjmp	.+14     	; 0xe30 <EXI_DISABLE+0x64>
		break;
	case INT0:
		CLEAR_BIT(GICR,5);
     e22:	ab e5       	ldi	r26, 0x5B	; 91
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	eb e5       	ldi	r30, 0x5B	; 91
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	8f 7d       	andi	r24, 0xDF	; 223
     e2e:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	cf 91       	pop	r28
     e38:	df 91       	pop	r29
     e3a:	08 95       	ret

00000e3c <DIO_initpin>:
#include "DIO_cfg.h"


void DIO_initpin(DioPin_Type pin,DioDirection_Type direction){
	uint8 port=pin/8;
	pin%=8;
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	00 d0       	rcall	.+0      	; 0xe42 <DIO_initpin+0x6>
     e42:	00 d0       	rcall	.+0      	; 0xe44 <DIO_initpin+0x8>
     e44:	0f 92       	push	r0
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
     e4a:	8a 83       	std	Y+2, r24	; 0x02
     e4c:	6b 83       	std	Y+3, r22	; 0x03
	switch(direction){
	case INPUT_PULLUP:
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	86 95       	lsr	r24
     e52:	86 95       	lsr	r24
     e54:	86 95       	lsr	r24
     e56:	89 83       	std	Y+1, r24	; 0x01
		switch(port){
		case PA:
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	87 70       	andi	r24, 0x07	; 7
     e5c:	8a 83       	std	Y+2, r24	; 0x02
			CLEAR_BIT(DDRA,pin);
			SET_BIT(PORTA,pin);
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	3d 83       	std	Y+5, r19	; 0x05
     e66:	2c 83       	std	Y+4, r18	; 0x04
     e68:	8c 81       	ldd	r24, Y+4	; 0x04
     e6a:	9d 81       	ldd	r25, Y+5	; 0x05
     e6c:	81 30       	cpi	r24, 0x01	; 1
     e6e:	91 05       	cpc	r25, r1
     e70:	09 f4       	brne	.+2      	; 0xe74 <DIO_initpin+0x38>
     e72:	84 c0       	rjmp	.+264    	; 0xf7c <DIO_initpin+0x140>
     e74:	2c 81       	ldd	r18, Y+4	; 0x04
     e76:	3d 81       	ldd	r19, Y+5	; 0x05
     e78:	22 30       	cpi	r18, 0x02	; 2
     e7a:	31 05       	cpc	r19, r1
     e7c:	2c f4       	brge	.+10     	; 0xe88 <DIO_initpin+0x4c>
     e7e:	8c 81       	ldd	r24, Y+4	; 0x04
     e80:	9d 81       	ldd	r25, Y+5	; 0x05
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	71 f0       	breq	.+28     	; 0xea2 <DIO_initpin+0x66>
     e86:	bf c1       	rjmp	.+894    	; 0x1206 <DIO_initpin+0x3ca>
     e88:	2c 81       	ldd	r18, Y+4	; 0x04
     e8a:	3d 81       	ldd	r19, Y+5	; 0x05
     e8c:	22 30       	cpi	r18, 0x02	; 2
     e8e:	31 05       	cpc	r19, r1
     e90:	09 f4       	brne	.+2      	; 0xe94 <DIO_initpin+0x58>
     e92:	e1 c0       	rjmp	.+450    	; 0x1056 <DIO_initpin+0x21a>
     e94:	8c 81       	ldd	r24, Y+4	; 0x04
     e96:	9d 81       	ldd	r25, Y+5	; 0x05
     e98:	83 30       	cpi	r24, 0x03	; 3
     e9a:	91 05       	cpc	r25, r1
     e9c:	09 f4       	brne	.+2      	; 0xea0 <DIO_initpin+0x64>
     e9e:	48 c1       	rjmp	.+656    	; 0x1130 <DIO_initpin+0x2f4>
     ea0:	b2 c1       	rjmp	.+868    	; 0x1206 <DIO_initpin+0x3ca>
			break;
		case PB:
			CLEAR_BIT(DDRB,pin);
			SET_BIT(PORTB,pin);
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	82 30       	cpi	r24, 0x02	; 2
     ea6:	a1 f4       	brne	.+40     	; 0xed0 <DIO_initpin+0x94>
			break;
		case PC:
     ea8:	aa e3       	ldi	r26, 0x3A	; 58
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	ea e3       	ldi	r30, 0x3A	; 58
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	48 2f       	mov	r20, r24
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 2e       	mov	r0, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <DIO_initpin+0x8a>
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	0a 94       	dec	r0
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <DIO_initpin+0x86>
     eca:	84 2b       	or	r24, r20
     ecc:	8c 93       	st	X, r24
     ece:	9b c1       	rjmp	.+822    	; 0x1206 <DIO_initpin+0x3ca>
			CLEAR_BIT(DDRC,pin);
			SET_BIT(PORTC,pin);
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	81 30       	cpi	r24, 0x01	; 1
     ed4:	41 f5       	brne	.+80     	; 0xf26 <DIO_initpin+0xea>
			break;
		case PD:
     ed6:	aa e3       	ldi	r26, 0x3A	; 58
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	ea e3       	ldi	r30, 0x3A	; 58
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	48 2f       	mov	r20, r24
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <DIO_initpin+0xb6>
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	2a 95       	dec	r18
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <DIO_initpin+0xb2>
     ef6:	80 95       	com	r24
     ef8:	84 23       	and	r24, r20
     efa:	8c 93       	st	X, r24
			CLEAR_BIT(DDRD,pin);
     efc:	ab e3       	ldi	r26, 0x3B	; 59
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	eb e3       	ldi	r30, 0x3B	; 59
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	48 2f       	mov	r20, r24
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 2e       	mov	r0, r18
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <DIO_initpin+0xde>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	0a 94       	dec	r0
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <DIO_initpin+0xda>
     f1e:	80 95       	com	r24
     f20:	84 23       	and	r24, r20
     f22:	8c 93       	st	X, r24
     f24:	70 c1       	rjmp	.+736    	; 0x1206 <DIO_initpin+0x3ca>
			SET_BIT(PORTD,pin);
			break;
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	88 23       	and	r24, r24
     f2a:	09 f0       	breq	.+2      	; 0xf2e <DIO_initpin+0xf2>
     f2c:	6c c1       	rjmp	.+728    	; 0x1206 <DIO_initpin+0x3ca>
		}
		break;
     f2e:	aa e3       	ldi	r26, 0x3A	; 58
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	ea e3       	ldi	r30, 0x3A	; 58
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	48 2f       	mov	r20, r24
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <DIO_initpin+0x10e>
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	2a 95       	dec	r18
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <DIO_initpin+0x10a>
     f4e:	80 95       	com	r24
     f50:	84 23       	and	r24, r20
     f52:	8c 93       	st	X, r24
	case INPUT_FLOATING:
     f54:	ab e3       	ldi	r26, 0x3B	; 59
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	eb e3       	ldi	r30, 0x3B	; 59
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	48 2f       	mov	r20, r24
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	02 2e       	mov	r0, r18
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <DIO_initpin+0x136>
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	0a 94       	dec	r0
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <DIO_initpin+0x132>
     f76:	84 2b       	or	r24, r20
     f78:	8c 93       	st	X, r24
     f7a:	45 c1       	rjmp	.+650    	; 0x1206 <DIO_initpin+0x3ca>
		switch(port){
			case PA:
				CLEAR_BIT(DDRA,pin);
				CLEAR_BIT(PORTA,pin);
				break;
			case PB:
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	82 30       	cpi	r24, 0x02	; 2
     f80:	a1 f4       	brne	.+40     	; 0xfaa <DIO_initpin+0x16e>
				CLEAR_BIT(DDRB,pin);
				CLEAR_BIT(PORTB,pin);
     f82:	a7 e3       	ldi	r26, 0x37	; 55
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e7 e3       	ldi	r30, 0x37	; 55
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	48 2f       	mov	r20, r24
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	02 2e       	mov	r0, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <DIO_initpin+0x164>
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	0a 94       	dec	r0
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <DIO_initpin+0x160>
     fa4:	84 2b       	or	r24, r20
     fa6:	8c 93       	st	X, r24
     fa8:	2e c1       	rjmp	.+604    	; 0x1206 <DIO_initpin+0x3ca>
				break;
			case PC:
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	81 30       	cpi	r24, 0x01	; 1
     fae:	41 f5       	brne	.+80     	; 0x1000 <DIO_initpin+0x1c4>
				CLEAR_BIT(DDRC,pin);
				CLEAR_BIT(PORTC,pin);
     fb0:	a7 e3       	ldi	r26, 0x37	; 55
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e7 e3       	ldi	r30, 0x37	; 55
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	48 2f       	mov	r20, r24
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <DIO_initpin+0x190>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	2a 95       	dec	r18
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <DIO_initpin+0x18c>
     fd0:	80 95       	com	r24
     fd2:	84 23       	and	r24, r20
     fd4:	8c 93       	st	X, r24
				break;
     fd6:	a8 e3       	ldi	r26, 0x38	; 56
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e8 e3       	ldi	r30, 0x38	; 56
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	48 2f       	mov	r20, r24
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	02 2e       	mov	r0, r18
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <DIO_initpin+0x1b8>
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	0a 94       	dec	r0
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <DIO_initpin+0x1b4>
     ff8:	80 95       	com	r24
     ffa:	84 23       	and	r24, r20
     ffc:	8c 93       	st	X, r24
     ffe:	03 c1       	rjmp	.+518    	; 0x1206 <DIO_initpin+0x3ca>
			case PD:
				CLEAR_BIT(DDRD,pin);
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	88 23       	and	r24, r24
    1004:	09 f0       	breq	.+2      	; 0x1008 <DIO_initpin+0x1cc>
    1006:	ff c0       	rjmp	.+510    	; 0x1206 <DIO_initpin+0x3ca>
				CLEAR_BIT(PORTD,pin);
				break;
    1008:	a7 e3       	ldi	r26, 0x37	; 55
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e7 e3       	ldi	r30, 0x37	; 55
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <DIO_initpin+0x1e8>
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	2a 95       	dec	r18
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <DIO_initpin+0x1e4>
    1028:	80 95       	com	r24
    102a:	84 23       	and	r24, r20
    102c:	8c 93       	st	X, r24
			}
    102e:	a8 e3       	ldi	r26, 0x38	; 56
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e8 e3       	ldi	r30, 0x38	; 56
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	48 2f       	mov	r20, r24
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 2e       	mov	r0, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <DIO_initpin+0x210>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	0a 94       	dec	r0
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <DIO_initpin+0x20c>
    1050:	84 2b       	or	r24, r20
    1052:	8c 93       	st	X, r24
    1054:	d8 c0       	rjmp	.+432    	; 0x1206 <DIO_initpin+0x3ca>
			break;
	case OUTPUT:
		switch(port){
			case PA:
				SET_BIT(DDRA,pin);
				CLEAR_BIT(PORTA,pin);
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	82 30       	cpi	r24, 0x02	; 2
    105a:	a1 f4       	brne	.+40     	; 0x1084 <DIO_initpin+0x248>
				break;
			case PB:
    105c:	a4 e3       	ldi	r26, 0x34	; 52
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e4 e3       	ldi	r30, 0x34	; 52
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	48 2f       	mov	r20, r24
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 2e       	mov	r0, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <DIO_initpin+0x23e>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <DIO_initpin+0x23a>
    107e:	84 2b       	or	r24, r20
    1080:	8c 93       	st	X, r24
    1082:	c1 c0       	rjmp	.+386    	; 0x1206 <DIO_initpin+0x3ca>
				SET_BIT(DDRB,pin);
				CLEAR_BIT(PORTB,pin);
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	81 30       	cpi	r24, 0x01	; 1
    1088:	41 f5       	brne	.+80     	; 0x10da <DIO_initpin+0x29e>
				break;
			case PC:
    108a:	a4 e3       	ldi	r26, 0x34	; 52
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e4 e3       	ldi	r30, 0x34	; 52
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	48 2f       	mov	r20, r24
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <DIO_initpin+0x26a>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	2a 95       	dec	r18
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <DIO_initpin+0x266>
    10aa:	80 95       	com	r24
    10ac:	84 23       	and	r24, r20
    10ae:	8c 93       	st	X, r24
				SET_BIT(DDRC,pin);
    10b0:	a5 e3       	ldi	r26, 0x35	; 53
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e5 e3       	ldi	r30, 0x35	; 53
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	48 2f       	mov	r20, r24
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	02 2e       	mov	r0, r18
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <DIO_initpin+0x292>
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	0a 94       	dec	r0
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <DIO_initpin+0x28e>
    10d2:	80 95       	com	r24
    10d4:	84 23       	and	r24, r20
    10d6:	8c 93       	st	X, r24
    10d8:	96 c0       	rjmp	.+300    	; 0x1206 <DIO_initpin+0x3ca>
				CLEAR_BIT(PORTC,pin);
				break;
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	88 23       	and	r24, r24
    10de:	09 f0       	breq	.+2      	; 0x10e2 <DIO_initpin+0x2a6>
    10e0:	92 c0       	rjmp	.+292    	; 0x1206 <DIO_initpin+0x3ca>
			case PD:
				SET_BIT(DDRD,pin);
    10e2:	a4 e3       	ldi	r26, 0x34	; 52
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e4 e3       	ldi	r30, 0x34	; 52
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <DIO_initpin+0x2c2>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	2a 95       	dec	r18
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <DIO_initpin+0x2be>
    1102:	80 95       	com	r24
    1104:	84 23       	and	r24, r20
    1106:	8c 93       	st	X, r24
				CLEAR_BIT(PORTD,pin);
    1108:	a5 e3       	ldi	r26, 0x35	; 53
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e5 e3       	ldi	r30, 0x35	; 53
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	48 2f       	mov	r20, r24
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	02 2e       	mov	r0, r18
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <DIO_initpin+0x2ea>
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	0a 94       	dec	r0
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <DIO_initpin+0x2e6>
    112a:	84 2b       	or	r24, r20
    112c:	8c 93       	st	X, r24
    112e:	6b c0       	rjmp	.+214    	; 0x1206 <DIO_initpin+0x3ca>
				break;
			}
			break;
	}
}

    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	82 30       	cpi	r24, 0x02	; 2
    1134:	a1 f4       	brne	.+40     	; 0x115e <DIO_initpin+0x322>
void DIO_writepin(DioPin_Type pin,DioValue_Type value)
{
    1136:	a1 e3       	ldi	r26, 0x31	; 49
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e1 e3       	ldi	r30, 0x31	; 49
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	02 2e       	mov	r0, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_initpin+0x318>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	0a 94       	dec	r0
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_initpin+0x314>
    1158:	84 2b       	or	r24, r20
    115a:	8c 93       	st	X, r24
    115c:	54 c0       	rjmp	.+168    	; 0x1206 <DIO_initpin+0x3ca>
	uint8 port=pin/8;
	pin%=8;
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	81 30       	cpi	r24, 0x01	; 1
    1162:	41 f5       	brne	.+80     	; 0x11b4 <DIO_initpin+0x378>
	switch(value){
	case LOW:
    1164:	a1 e3       	ldi	r26, 0x31	; 49
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e1 e3       	ldi	r30, 0x31	; 49
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	48 2f       	mov	r20, r24
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <DIO_initpin+0x344>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	2a 95       	dec	r18
    1182:	e2 f7       	brpl	.-8      	; 0x117c <DIO_initpin+0x340>
    1184:	80 95       	com	r24
    1186:	84 23       	and	r24, r20
    1188:	8c 93       	st	X, r24
		switch(port){
    118a:	a2 e3       	ldi	r26, 0x32	; 50
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	e2 e3       	ldi	r30, 0x32	; 50
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	48 2f       	mov	r20, r24
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	02 2e       	mov	r0, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <DIO_initpin+0x36c>
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	0a 94       	dec	r0
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <DIO_initpin+0x368>
    11ac:	80 95       	com	r24
    11ae:	84 23       	and	r24, r20
    11b0:	8c 93       	st	X, r24
    11b2:	29 c0       	rjmp	.+82     	; 0x1206 <DIO_initpin+0x3ca>
		case PA:
			CLEAR_BIT(PORTA,pin);
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	88 23       	and	r24, r24
    11b8:	31 f5       	brne	.+76     	; 0x1206 <DIO_initpin+0x3ca>
			break;
		case PB:
    11ba:	a1 e3       	ldi	r26, 0x31	; 49
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e1 e3       	ldi	r30, 0x31	; 49
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	48 2f       	mov	r20, r24
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <DIO_initpin+0x39a>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	2a 95       	dec	r18
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <DIO_initpin+0x396>
    11da:	80 95       	com	r24
    11dc:	84 23       	and	r24, r20
    11de:	8c 93       	st	X, r24
			CLEAR_BIT(PORTB,pin);
    11e0:	a2 e3       	ldi	r26, 0x32	; 50
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e2 e3       	ldi	r30, 0x32	; 50
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	48 2f       	mov	r20, r24
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 2e       	mov	r0, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <DIO_initpin+0x3c2>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	0a 94       	dec	r0
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <DIO_initpin+0x3be>
    1202:	84 2b       	or	r24, r20
    1204:	8c 93       	st	X, r24
		case PC:
			CLEAR_BIT(PORTC,pin);
			break;
		case PD:
			CLEAR_BIT(PORTD,pin);
			break;
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	08 95       	ret

00001216 <DIO_writepin>:
				break;
			case PB:
				SET_BIT(PORTB,pin);
				break;
			case PC:
				SET_BIT(PORTC,pin);
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	00 d0       	rcall	.+0      	; 0x121c <DIO_writepin+0x6>
    121c:	00 d0       	rcall	.+0      	; 0x121e <DIO_writepin+0x8>
    121e:	0f 92       	push	r0
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	8a 83       	std	Y+2, r24	; 0x02
    1226:	6b 83       	std	Y+3, r22	; 0x03
				break;
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	86 95       	lsr	r24
    122c:	86 95       	lsr	r24
    122e:	86 95       	lsr	r24
    1230:	89 83       	std	Y+1, r24	; 0x01
			case PD:
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	87 70       	andi	r24, 0x07	; 7
    1236:	8a 83       	std	Y+2, r24	; 0x02
				SET_BIT(PORTD,pin);
				break;
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	3d 83       	std	Y+5, r19	; 0x05
    1240:	2c 83       	std	Y+4, r18	; 0x04
    1242:	8c 81       	ldd	r24, Y+4	; 0x04
    1244:	9d 81       	ldd	r25, Y+5	; 0x05
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	91 05       	cpc	r25, r1
    124a:	09 f4       	brne	.+2      	; 0x124e <DIO_writepin+0x38>
    124c:	47 c0       	rjmp	.+142    	; 0x12dc <DIO_writepin+0xc6>
    124e:	2c 81       	ldd	r18, Y+4	; 0x04
    1250:	3d 81       	ldd	r19, Y+5	; 0x05
    1252:	22 30       	cpi	r18, 0x02	; 2
    1254:	31 05       	cpc	r19, r1
    1256:	2c f4       	brge	.+10     	; 0x1262 <DIO_writepin+0x4c>
    1258:	8c 81       	ldd	r24, Y+4	; 0x04
    125a:	9d 81       	ldd	r25, Y+5	; 0x05
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	71 f0       	breq	.+28     	; 0x127c <DIO_writepin+0x66>
    1260:	cb c0       	rjmp	.+406    	; 0x13f8 <DIO_writepin+0x1e2>
    1262:	2c 81       	ldd	r18, Y+4	; 0x04
    1264:	3d 81       	ldd	r19, Y+5	; 0x05
    1266:	22 30       	cpi	r18, 0x02	; 2
    1268:	31 05       	cpc	r19, r1
    126a:	09 f4       	brne	.+2      	; 0x126e <DIO_writepin+0x58>
    126c:	67 c0       	rjmp	.+206    	; 0x133c <DIO_writepin+0x126>
    126e:	8c 81       	ldd	r24, Y+4	; 0x04
    1270:	9d 81       	ldd	r25, Y+5	; 0x05
    1272:	83 30       	cpi	r24, 0x03	; 3
    1274:	91 05       	cpc	r25, r1
    1276:	09 f4       	brne	.+2      	; 0x127a <DIO_writepin+0x64>
    1278:	91 c0       	rjmp	.+290    	; 0x139c <DIO_writepin+0x186>
    127a:	be c0       	rjmp	.+380    	; 0x13f8 <DIO_writepin+0x1e2>
			}
			break;

	}
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	81 30       	cpi	r24, 0x01	; 1
    1280:	a1 f4       	brne	.+40     	; 0x12aa <DIO_writepin+0x94>

}
    1282:	ab e3       	ldi	r26, 0x3B	; 59
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	eb e3       	ldi	r30, 0x3B	; 59
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	48 2f       	mov	r20, r24
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	02 2e       	mov	r0, r18
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <DIO_writepin+0x8a>
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	0a 94       	dec	r0
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <DIO_writepin+0x86>
    12a4:	84 2b       	or	r24, r20
    12a6:	8c 93       	st	X, r24
    12a8:	a7 c0       	rjmp	.+334    	; 0x13f8 <DIO_writepin+0x1e2>

DioValue_Type DIO_readpin(DioPin_Type pin)
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	88 23       	and	r24, r24
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <DIO_writepin+0x9c>
    12b0:	a3 c0       	rjmp	.+326    	; 0x13f8 <DIO_writepin+0x1e2>
{
	uint8 port=pin/8;
    12b2:	ab e3       	ldi	r26, 0x3B	; 59
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	eb e3       	ldi	r30, 0x3B	; 59
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	48 2f       	mov	r20, r24
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	02 2e       	mov	r0, r18
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <DIO_writepin+0xba>
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	0a 94       	dec	r0
    12d2:	e2 f7       	brpl	.-8      	; 0x12cc <DIO_writepin+0xb6>
    12d4:	80 95       	com	r24
    12d6:	84 23       	and	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	8e c0       	rjmp	.+284    	; 0x13f8 <DIO_writepin+0x1e2>
	DioValue_Type pin_level=LOW;

		switch(port){
		case PA:
			pin_level=GET_BIT(PINA,pin);
			break;
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	81 30       	cpi	r24, 0x01	; 1
    12e0:	a1 f4       	brne	.+40     	; 0x130a <DIO_writepin+0xf4>
		case PB:
			pin_level=GET_BIT(PINB,pin);
    12e2:	a8 e3       	ldi	r26, 0x38	; 56
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e8 e3       	ldi	r30, 0x38	; 56
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	48 2f       	mov	r20, r24
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	02 2e       	mov	r0, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <DIO_writepin+0xea>
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	0a 94       	dec	r0
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <DIO_writepin+0xe6>
    1304:	84 2b       	or	r24, r20
    1306:	8c 93       	st	X, r24
    1308:	77 c0       	rjmp	.+238    	; 0x13f8 <DIO_writepin+0x1e2>
			break;
		case PC:
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	88 23       	and	r24, r24
    130e:	09 f0       	breq	.+2      	; 0x1312 <DIO_writepin+0xfc>
    1310:	73 c0       	rjmp	.+230    	; 0x13f8 <DIO_writepin+0x1e2>

			pin_level=GET_BIT(PINC,pin);
    1312:	a8 e3       	ldi	r26, 0x38	; 56
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e8 e3       	ldi	r30, 0x38	; 56
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 2e       	mov	r0, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <DIO_writepin+0x11a>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <DIO_writepin+0x116>
    1334:	80 95       	com	r24
    1336:	84 23       	and	r24, r20
    1338:	8c 93       	st	X, r24
    133a:	5e c0       	rjmp	.+188    	; 0x13f8 <DIO_writepin+0x1e2>
		case PD:

			pin_level=GET_BIT(PIND,pin);
			break;


    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	81 30       	cpi	r24, 0x01	; 1
    1340:	a1 f4       	brne	.+40     	; 0x136a <DIO_writepin+0x154>
			}

    1342:	a5 e3       	ldi	r26, 0x35	; 53
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e5 e3       	ldi	r30, 0x35	; 53
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	48 2f       	mov	r20, r24
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	02 2e       	mov	r0, r18
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <DIO_writepin+0x14a>
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	0a 94       	dec	r0
    1362:	e2 f7       	brpl	.-8      	; 0x135c <DIO_writepin+0x146>
    1364:	84 2b       	or	r24, r20
    1366:	8c 93       	st	X, r24
    1368:	47 c0       	rjmp	.+142    	; 0x13f8 <DIO_writepin+0x1e2>
			return pin_level;

    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	88 23       	and	r24, r24
    136e:	09 f0       	breq	.+2      	; 0x1372 <DIO_writepin+0x15c>
    1370:	43 c0       	rjmp	.+134    	; 0x13f8 <DIO_writepin+0x1e2>
	}
void DIO_writeport(DioPort_Type port,DioValue_Type value){
    1372:	a5 e3       	ldi	r26, 0x35	; 53
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e5 e3       	ldi	r30, 0x35	; 53
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	48 2f       	mov	r20, r24
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 2e       	mov	r0, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <DIO_writepin+0x17a>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	0a 94       	dec	r0
    1392:	e2 f7       	brpl	.-8      	; 0x138c <DIO_writepin+0x176>
    1394:	80 95       	com	r24
    1396:	84 23       	and	r24, r20
    1398:	8c 93       	st	X, r24
    139a:	2e c0       	rjmp	.+92     	; 0x13f8 <DIO_writepin+0x1e2>
	case PA:
		PORTA=value;
	break;
	case PB:
		PORTB=value;
	break;
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	81 30       	cpi	r24, 0x01	; 1
    13a0:	a1 f4       	brne	.+40     	; 0x13ca <DIO_writepin+0x1b4>
	case PC:
		PORTC=value;
    13a2:	a2 e3       	ldi	r26, 0x32	; 50
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e2 e3       	ldi	r30, 0x32	; 50
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	48 2f       	mov	r20, r24
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	02 2e       	mov	r0, r18
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <DIO_writepin+0x1aa>
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	0a 94       	dec	r0
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <DIO_writepin+0x1a6>
    13c4:	84 2b       	or	r24, r20
    13c6:	8c 93       	st	X, r24
    13c8:	17 c0       	rjmp	.+46     	; 0x13f8 <DIO_writepin+0x1e2>
	break;
	case PD:
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	88 23       	and	r24, r24
    13ce:	a1 f4       	brne	.+40     	; 0x13f8 <DIO_writepin+0x1e2>
		PORTD=value;
	break;
    13d0:	a2 e3       	ldi	r26, 0x32	; 50
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	e2 e3       	ldi	r30, 0x32	; 50
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	48 2f       	mov	r20, r24
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	02 2e       	mov	r0, r18
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <DIO_writepin+0x1d8>
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	0a 94       	dec	r0
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <DIO_writepin+0x1d4>
    13f2:	80 95       	com	r24
    13f4:	84 23       	and	r24, r20
    13f6:	8c 93       	st	X, r24
}

void DIO_readport(DioPort_Type port){
	DioPort_Type value;
	switch(port){
	case PA:
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	cf 91       	pop	r28
    1404:	df 91       	pop	r29
    1406:	08 95       	ret

00001408 <DIO_readpin>:
	break;
	case PC:
		value=PINC;
	break;
	case PD:
		value=PIND;
    1408:	df 93       	push	r29
    140a:	cf 93       	push	r28
    140c:	00 d0       	rcall	.+0      	; 0x140e <DIO_readpin+0x6>
    140e:	00 d0       	rcall	.+0      	; 0x1410 <DIO_readpin+0x8>
    1410:	00 d0       	rcall	.+0      	; 0x1412 <DIO_readpin+0xa>
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
    1416:	8b 83       	std	Y+3, r24	; 0x03
	break;
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	86 95       	lsr	r24
    141c:	86 95       	lsr	r24
    141e:	86 95       	lsr	r24
    1420:	8a 83       	std	Y+2, r24	; 0x02
	}
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	87 70       	andi	r24, 0x07	; 7
    1426:	8b 83       	std	Y+3, r24	; 0x03

}
void DIO_init(void){
for(uint8 i=0;i<NUM_OF_PINS;i++){
DIO_initpin(i,config_pins[i]);
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	3e 83       	std	Y+6, r19	; 0x06
    1430:	2d 83       	std	Y+5, r18	; 0x05
    1432:	4d 81       	ldd	r20, Y+5	; 0x05
    1434:	5e 81       	ldd	r21, Y+6	; 0x06
    1436:	41 30       	cpi	r20, 0x01	; 1
    1438:	51 05       	cpc	r21, r1
    143a:	41 f1       	breq	.+80     	; 0x148c <DIO_readpin+0x84>
    143c:	8d 81       	ldd	r24, Y+5	; 0x05
    143e:	9e 81       	ldd	r25, Y+6	; 0x06
    1440:	82 30       	cpi	r24, 0x02	; 2
    1442:	91 05       	cpc	r25, r1
    1444:	34 f4       	brge	.+12     	; 0x1452 <DIO_readpin+0x4a>
    1446:	2d 81       	ldd	r18, Y+5	; 0x05
    1448:	3e 81       	ldd	r19, Y+6	; 0x06
    144a:	21 15       	cp	r18, r1
    144c:	31 05       	cpc	r19, r1
    144e:	61 f0       	breq	.+24     	; 0x1468 <DIO_readpin+0x60>
    1450:	53 c0       	rjmp	.+166    	; 0x14f8 <DIO_readpin+0xf0>
    1452:	4d 81       	ldd	r20, Y+5	; 0x05
    1454:	5e 81       	ldd	r21, Y+6	; 0x06
    1456:	42 30       	cpi	r20, 0x02	; 2
    1458:	51 05       	cpc	r21, r1
    145a:	51 f1       	breq	.+84     	; 0x14b0 <DIO_readpin+0xa8>
    145c:	8d 81       	ldd	r24, Y+5	; 0x05
    145e:	9e 81       	ldd	r25, Y+6	; 0x06
    1460:	83 30       	cpi	r24, 0x03	; 3
    1462:	91 05       	cpc	r25, r1
    1464:	b9 f1       	breq	.+110    	; 0x14d4 <DIO_readpin+0xcc>
    1466:	48 c0       	rjmp	.+144    	; 0x14f8 <DIO_readpin+0xf0>
}
}


    1468:	e9 e3       	ldi	r30, 0x39	; 57
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	88 2f       	mov	r24, r24
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	a9 01       	movw	r20, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <DIO_readpin+0x78>
    147c:	55 95       	asr	r21
    147e:	47 95       	ror	r20
    1480:	8a 95       	dec	r24
    1482:	e2 f7       	brpl	.-8      	; 0x147c <DIO_readpin+0x74>
    1484:	ca 01       	movw	r24, r20
    1486:	81 70       	andi	r24, 0x01	; 1
    1488:	89 83       	std	Y+1, r24	; 0x01
    148a:	39 c0       	rjmp	.+114    	; 0x14fe <DIO_readpin+0xf6>
    148c:	e6 e3       	ldi	r30, 0x36	; 54
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	88 2f       	mov	r24, r24
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	a9 01       	movw	r20, r18
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <DIO_readpin+0x9c>
    14a0:	55 95       	asr	r21
    14a2:	47 95       	ror	r20
    14a4:	8a 95       	dec	r24
    14a6:	e2 f7       	brpl	.-8      	; 0x14a0 <DIO_readpin+0x98>
    14a8:	ca 01       	movw	r24, r20
    14aa:	81 70       	andi	r24, 0x01	; 1
    14ac:	89 83       	std	Y+1, r24	; 0x01
    14ae:	27 c0       	rjmp	.+78     	; 0x14fe <DIO_readpin+0xf6>
    14b0:	e3 e3       	ldi	r30, 0x33	; 51
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	88 2f       	mov	r24, r24
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	a9 01       	movw	r20, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <DIO_readpin+0xc0>
    14c4:	55 95       	asr	r21
    14c6:	47 95       	ror	r20
    14c8:	8a 95       	dec	r24
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <DIO_readpin+0xbc>
    14cc:	ca 01       	movw	r24, r20
    14ce:	81 70       	andi	r24, 0x01	; 1
    14d0:	89 83       	std	Y+1, r24	; 0x01
    14d2:	15 c0       	rjmp	.+42     	; 0x14fe <DIO_readpin+0xf6>
    14d4:	e0 e3       	ldi	r30, 0x30	; 48
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	88 2f       	mov	r24, r24
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	a9 01       	movw	r20, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <DIO_readpin+0xe4>
    14e8:	55 95       	asr	r21
    14ea:	47 95       	ror	r20
    14ec:	8a 95       	dec	r24
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <DIO_readpin+0xe0>
    14f0:	ca 01       	movw	r24, r20
    14f2:	81 70       	andi	r24, 0x01	; 1
    14f4:	89 83       	std	Y+1, r24	; 0x01
    14f6:	03 c0       	rjmp	.+6      	; 0x14fe <DIO_readpin+0xf6>
    14f8:	5f ef       	ldi	r21, 0xFF	; 255
    14fa:	5c 83       	std	Y+4, r21	; 0x04
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <DIO_readpin+0xfa>
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	8c 83       	std	Y+4, r24	; 0x04
    1502:	8c 81       	ldd	r24, Y+4	; 0x04
    1504:	26 96       	adiw	r28, 0x06	; 6
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	de bf       	out	0x3e, r29	; 62
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	cd bf       	out	0x3d, r28	; 61
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <DIO_writeport>:
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	00 d0       	rcall	.+0      	; 0x151c <DIO_writeport+0x6>
    151c:	00 d0       	rcall	.+0      	; 0x151e <DIO_writeport+0x8>
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	89 83       	std	Y+1, r24	; 0x01
    1524:	6a 83       	std	Y+2, r22	; 0x02
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	3c 83       	std	Y+4, r19	; 0x04
    152e:	2b 83       	std	Y+3, r18	; 0x03
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	9c 81       	ldd	r25, Y+4	; 0x04
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	91 05       	cpc	r25, r1
    1538:	d1 f0       	breq	.+52     	; 0x156e <DIO_writeport+0x58>
    153a:	2b 81       	ldd	r18, Y+3	; 0x03
    153c:	3c 81       	ldd	r19, Y+4	; 0x04
    153e:	22 30       	cpi	r18, 0x02	; 2
    1540:	31 05       	cpc	r19, r1
    1542:	2c f4       	brge	.+10     	; 0x154e <DIO_writeport+0x38>
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	9c 81       	ldd	r25, Y+4	; 0x04
    1548:	00 97       	sbiw	r24, 0x00	; 0
    154a:	61 f0       	breq	.+24     	; 0x1564 <DIO_writeport+0x4e>
    154c:	1e c0       	rjmp	.+60     	; 0x158a <DIO_writeport+0x74>
    154e:	2b 81       	ldd	r18, Y+3	; 0x03
    1550:	3c 81       	ldd	r19, Y+4	; 0x04
    1552:	22 30       	cpi	r18, 0x02	; 2
    1554:	31 05       	cpc	r19, r1
    1556:	81 f0       	breq	.+32     	; 0x1578 <DIO_writeport+0x62>
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	9c 81       	ldd	r25, Y+4	; 0x04
    155c:	83 30       	cpi	r24, 0x03	; 3
    155e:	91 05       	cpc	r25, r1
    1560:	81 f0       	breq	.+32     	; 0x1582 <DIO_writeport+0x6c>
    1562:	13 c0       	rjmp	.+38     	; 0x158a <DIO_writeport+0x74>
    1564:	eb e3       	ldi	r30, 0x3B	; 59
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	80 83       	st	Z, r24
    156c:	0e c0       	rjmp	.+28     	; 0x158a <DIO_writeport+0x74>
    156e:	e8 e3       	ldi	r30, 0x38	; 56
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	80 83       	st	Z, r24
    1576:	09 c0       	rjmp	.+18     	; 0x158a <DIO_writeport+0x74>
    1578:	e5 e3       	ldi	r30, 0x35	; 53
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	80 83       	st	Z, r24
    1580:	04 c0       	rjmp	.+8      	; 0x158a <DIO_writeport+0x74>
    1582:	e2 e3       	ldi	r30, 0x32	; 50
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	80 83       	st	Z, r24
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	cf 91       	pop	r28
    1594:	df 91       	pop	r29
    1596:	08 95       	ret

00001598 <DIO_readport>:
    1598:	df 93       	push	r29
    159a:	cf 93       	push	r28
    159c:	00 d0       	rcall	.+0      	; 0x159e <DIO_readport+0x6>
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <DIO_readport+0x8>
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	8a 83       	std	Y+2, r24	; 0x02
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	3c 83       	std	Y+4, r19	; 0x04
    15ae:	2b 83       	std	Y+3, r18	; 0x03
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	9c 81       	ldd	r25, Y+4	; 0x04
    15b4:	81 30       	cpi	r24, 0x01	; 1
    15b6:	91 05       	cpc	r25, r1
    15b8:	d1 f0       	breq	.+52     	; 0x15ee <DIO_readport+0x56>
    15ba:	2b 81       	ldd	r18, Y+3	; 0x03
    15bc:	3c 81       	ldd	r19, Y+4	; 0x04
    15be:	22 30       	cpi	r18, 0x02	; 2
    15c0:	31 05       	cpc	r19, r1
    15c2:	2c f4       	brge	.+10     	; 0x15ce <DIO_readport+0x36>
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	9c 81       	ldd	r25, Y+4	; 0x04
    15c8:	00 97       	sbiw	r24, 0x00	; 0
    15ca:	61 f0       	breq	.+24     	; 0x15e4 <DIO_readport+0x4c>
    15cc:	1e c0       	rjmp	.+60     	; 0x160a <DIO_readport+0x72>
    15ce:	2b 81       	ldd	r18, Y+3	; 0x03
    15d0:	3c 81       	ldd	r19, Y+4	; 0x04
    15d2:	22 30       	cpi	r18, 0x02	; 2
    15d4:	31 05       	cpc	r19, r1
    15d6:	81 f0       	breq	.+32     	; 0x15f8 <DIO_readport+0x60>
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	9c 81       	ldd	r25, Y+4	; 0x04
    15dc:	83 30       	cpi	r24, 0x03	; 3
    15de:	91 05       	cpc	r25, r1
    15e0:	81 f0       	breq	.+32     	; 0x1602 <DIO_readport+0x6a>
    15e2:	13 c0       	rjmp	.+38     	; 0x160a <DIO_readport+0x72>
    15e4:	e9 e3       	ldi	r30, 0x39	; 57
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	89 83       	std	Y+1, r24	; 0x01
    15ec:	0e c0       	rjmp	.+28     	; 0x160a <DIO_readport+0x72>
    15ee:	e6 e3       	ldi	r30, 0x36	; 54
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	09 c0       	rjmp	.+18     	; 0x160a <DIO_readport+0x72>
    15f8:	e3 e3       	ldi	r30, 0x33	; 51
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	89 83       	std	Y+1, r24	; 0x01
    1600:	04 c0       	rjmp	.+8      	; 0x160a <DIO_readport+0x72>
    1602:	e0 e3       	ldi	r30, 0x30	; 48
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	89 83       	std	Y+1, r24	; 0x01
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <DIO_initall>:
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	0f 92       	push	r0
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	19 82       	std	Y+1, r1	; 0x01
    1626:	19 82       	std	Y+1, r1	; 0x01
    1628:	0e c0       	rjmp	.+28     	; 0x1646 <DIO_initall+0x2c>
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	88 2f       	mov	r24, r24
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	fc 01       	movw	r30, r24
    1632:	e8 59       	subi	r30, 0x98	; 152
    1634:	ff 4f       	sbci	r31, 0xFF	; 255
    1636:	90 81       	ld	r25, Z
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	69 2f       	mov	r22, r25
    163c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <DIO_initpin>
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	8f 5f       	subi	r24, 0xFF	; 255
    1644:	89 83       	std	Y+1, r24	; 0x01
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	80 32       	cpi	r24, 0x20	; 32
    164a:	78 f3       	brcs	.-34     	; 0x162a <DIO_initall+0x10>
    164c:	0f 90       	pop	r0
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	08 95       	ret

00001654 <LCD_write_command>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_cfg.h"
#include "util/delay.h"

void LCD_write_command(uint8 command){
    1654:	0f 93       	push	r16
    1656:	1f 93       	push	r17
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	c3 56       	subi	r28, 0x63	; 99
    1662:	d0 40       	sbci	r29, 0x00	; 0
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	f8 94       	cli
    1668:	de bf       	out	0x3e, r29	; 62
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	cd bf       	out	0x3d, r28	; 61
    166e:	fe 01       	movw	r30, r28
    1670:	ed 59       	subi	r30, 0x9D	; 157
    1672:	ff 4f       	sbci	r31, 0xFF	; 255
    1674:	80 83       	st	Z, r24
	DIO_writepin(RS,LOW);
    1676:	88 e1       	ldi	r24, 0x18	; 24
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>
    167e:	fe 01       	movw	r30, r28
    1680:	e1 5a       	subi	r30, 0xA1	; 161
    1682:	ff 4f       	sbci	r31, 0xFF	; 255
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	a0 e8       	ldi	r26, 0x80	; 128
    168a:	bf e3       	ldi	r27, 0x3F	; 63
    168c:	80 83       	st	Z, r24
    168e:	91 83       	std	Z+1, r25	; 0x01
    1690:	a2 83       	std	Z+2, r26	; 0x02
    1692:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1694:	8e 01       	movw	r16, r28
    1696:	05 5a       	subi	r16, 0xA5	; 165
    1698:	1f 4f       	sbci	r17, 0xFF	; 255
    169a:	fe 01       	movw	r30, r28
    169c:	e1 5a       	subi	r30, 0xA1	; 161
    169e:	ff 4f       	sbci	r31, 0xFF	; 255
    16a0:	60 81       	ld	r22, Z
    16a2:	71 81       	ldd	r23, Z+1	; 0x01
    16a4:	82 81       	ldd	r24, Z+2	; 0x02
    16a6:	93 81       	ldd	r25, Z+3	; 0x03
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	4a ef       	ldi	r20, 0xFA	; 250
    16ae:	54 e4       	ldi	r21, 0x44	; 68
    16b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b4:	dc 01       	movw	r26, r24
    16b6:	cb 01       	movw	r24, r22
    16b8:	f8 01       	movw	r30, r16
    16ba:	80 83       	st	Z, r24
    16bc:	91 83       	std	Z+1, r25	; 0x01
    16be:	a2 83       	std	Z+2, r26	; 0x02
    16c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16c2:	fe 01       	movw	r30, r28
    16c4:	e5 5a       	subi	r30, 0xA5	; 165
    16c6:	ff 4f       	sbci	r31, 0xFF	; 255
    16c8:	60 81       	ld	r22, Z
    16ca:	71 81       	ldd	r23, Z+1	; 0x01
    16cc:	82 81       	ldd	r24, Z+2	; 0x02
    16ce:	93 81       	ldd	r25, Z+3	; 0x03
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	40 e8       	ldi	r20, 0x80	; 128
    16d6:	5f e3       	ldi	r21, 0x3F	; 63
    16d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16dc:	88 23       	and	r24, r24
    16de:	44 f4       	brge	.+16     	; 0x16f0 <LCD_write_command+0x9c>
		__ticks = 1;
    16e0:	fe 01       	movw	r30, r28
    16e2:	e7 5a       	subi	r30, 0xA7	; 167
    16e4:	ff 4f       	sbci	r31, 0xFF	; 255
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	91 83       	std	Z+1, r25	; 0x01
    16ec:	80 83       	st	Z, r24
    16ee:	64 c0       	rjmp	.+200    	; 0x17b8 <LCD_write_command+0x164>
	else if (__tmp > 65535)
    16f0:	fe 01       	movw	r30, r28
    16f2:	e5 5a       	subi	r30, 0xA5	; 165
    16f4:	ff 4f       	sbci	r31, 0xFF	; 255
    16f6:	60 81       	ld	r22, Z
    16f8:	71 81       	ldd	r23, Z+1	; 0x01
    16fa:	82 81       	ldd	r24, Z+2	; 0x02
    16fc:	93 81       	ldd	r25, Z+3	; 0x03
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	3f ef       	ldi	r19, 0xFF	; 255
    1702:	4f e7       	ldi	r20, 0x7F	; 127
    1704:	57 e4       	ldi	r21, 0x47	; 71
    1706:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    170a:	18 16       	cp	r1, r24
    170c:	0c f0       	brlt	.+2      	; 0x1710 <LCD_write_command+0xbc>
    170e:	43 c0       	rjmp	.+134    	; 0x1796 <LCD_write_command+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1710:	fe 01       	movw	r30, r28
    1712:	e1 5a       	subi	r30, 0xA1	; 161
    1714:	ff 4f       	sbci	r31, 0xFF	; 255
    1716:	60 81       	ld	r22, Z
    1718:	71 81       	ldd	r23, Z+1	; 0x01
    171a:	82 81       	ldd	r24, Z+2	; 0x02
    171c:	93 81       	ldd	r25, Z+3	; 0x03
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	40 e2       	ldi	r20, 0x20	; 32
    1724:	51 e4       	ldi	r21, 0x41	; 65
    1726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	8e 01       	movw	r16, r28
    1730:	07 5a       	subi	r16, 0xA7	; 167
    1732:	1f 4f       	sbci	r17, 0xFF	; 255
    1734:	bc 01       	movw	r22, r24
    1736:	cd 01       	movw	r24, r26
    1738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	f8 01       	movw	r30, r16
    1742:	91 83       	std	Z+1, r25	; 0x01
    1744:	80 83       	st	Z, r24
    1746:	1f c0       	rjmp	.+62     	; 0x1786 <LCD_write_command+0x132>
    1748:	fe 01       	movw	r30, r28
    174a:	e9 5a       	subi	r30, 0xA9	; 169
    174c:	ff 4f       	sbci	r31, 0xFF	; 255
    174e:	88 ec       	ldi	r24, 0xC8	; 200
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	91 83       	std	Z+1, r25	; 0x01
    1754:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1756:	fe 01       	movw	r30, r28
    1758:	e9 5a       	subi	r30, 0xA9	; 169
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	80 81       	ld	r24, Z
    175e:	91 81       	ldd	r25, Z+1	; 0x01
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	f1 f7       	brne	.-4      	; 0x1760 <LCD_write_command+0x10c>
    1764:	fe 01       	movw	r30, r28
    1766:	e9 5a       	subi	r30, 0xA9	; 169
    1768:	ff 4f       	sbci	r31, 0xFF	; 255
    176a:	91 83       	std	Z+1, r25	; 0x01
    176c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    176e:	de 01       	movw	r26, r28
    1770:	a7 5a       	subi	r26, 0xA7	; 167
    1772:	bf 4f       	sbci	r27, 0xFF	; 255
    1774:	fe 01       	movw	r30, r28
    1776:	e7 5a       	subi	r30, 0xA7	; 167
    1778:	ff 4f       	sbci	r31, 0xFF	; 255
    177a:	80 81       	ld	r24, Z
    177c:	91 81       	ldd	r25, Z+1	; 0x01
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	11 96       	adiw	r26, 0x01	; 1
    1782:	9c 93       	st	X, r25
    1784:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1786:	fe 01       	movw	r30, r28
    1788:	e7 5a       	subi	r30, 0xA7	; 167
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	80 81       	ld	r24, Z
    178e:	91 81       	ldd	r25, Z+1	; 0x01
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	d1 f6       	brne	.-76     	; 0x1748 <LCD_write_command+0xf4>
    1794:	27 c0       	rjmp	.+78     	; 0x17e4 <LCD_write_command+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1796:	8e 01       	movw	r16, r28
    1798:	07 5a       	subi	r16, 0xA7	; 167
    179a:	1f 4f       	sbci	r17, 0xFF	; 255
    179c:	fe 01       	movw	r30, r28
    179e:	e5 5a       	subi	r30, 0xA5	; 165
    17a0:	ff 4f       	sbci	r31, 0xFF	; 255
    17a2:	60 81       	ld	r22, Z
    17a4:	71 81       	ldd	r23, Z+1	; 0x01
    17a6:	82 81       	ldd	r24, Z+2	; 0x02
    17a8:	93 81       	ldd	r25, Z+3	; 0x03
    17aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	f8 01       	movw	r30, r16
    17b4:	91 83       	std	Z+1, r25	; 0x01
    17b6:	80 83       	st	Z, r24
    17b8:	de 01       	movw	r26, r28
    17ba:	ab 5a       	subi	r26, 0xAB	; 171
    17bc:	bf 4f       	sbci	r27, 0xFF	; 255
    17be:	fe 01       	movw	r30, r28
    17c0:	e7 5a       	subi	r30, 0xA7	; 167
    17c2:	ff 4f       	sbci	r31, 0xFF	; 255
    17c4:	80 81       	ld	r24, Z
    17c6:	91 81       	ldd	r25, Z+1	; 0x01
    17c8:	8d 93       	st	X+, r24
    17ca:	9c 93       	st	X, r25
    17cc:	fe 01       	movw	r30, r28
    17ce:	eb 5a       	subi	r30, 0xAB	; 171
    17d0:	ff 4f       	sbci	r31, 0xFF	; 255
    17d2:	80 81       	ld	r24, Z
    17d4:	91 81       	ldd	r25, Z+1	; 0x01
    17d6:	01 97       	sbiw	r24, 0x01	; 1
    17d8:	f1 f7       	brne	.-4      	; 0x17d6 <LCD_write_command+0x182>
    17da:	fe 01       	movw	r30, r28
    17dc:	eb 5a       	subi	r30, 0xAB	; 171
    17de:	ff 4f       	sbci	r31, 0xFF	; 255
    17e0:	91 83       	std	Z+1, r25	; 0x01
    17e2:	80 83       	st	Z, r24

	DIO_writepin(E,LOW);
	_delay_ms(3);
#elif(LCD_MODE==MODE_4_BITS)

	DIO_writepin(E,HIGH);
    17e4:	89 e1       	ldi	r24, 0x19	; 25
    17e6:	61 e0       	ldi	r22, 0x01	; 1
    17e8:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>
    17ec:	fe 01       	movw	r30, r28
    17ee:	ef 5a       	subi	r30, 0xAF	; 175
    17f0:	ff 4f       	sbci	r31, 0xFF	; 255
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	a0 e8       	ldi	r26, 0x80	; 128
    17f8:	bf e3       	ldi	r27, 0x3F	; 63
    17fa:	80 83       	st	Z, r24
    17fc:	91 83       	std	Z+1, r25	; 0x01
    17fe:	a2 83       	std	Z+2, r26	; 0x02
    1800:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1802:	8e 01       	movw	r16, r28
    1804:	03 5b       	subi	r16, 0xB3	; 179
    1806:	1f 4f       	sbci	r17, 0xFF	; 255
    1808:	fe 01       	movw	r30, r28
    180a:	ef 5a       	subi	r30, 0xAF	; 175
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	60 81       	ld	r22, Z
    1810:	71 81       	ldd	r23, Z+1	; 0x01
    1812:	82 81       	ldd	r24, Z+2	; 0x02
    1814:	93 81       	ldd	r25, Z+3	; 0x03
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	4a ef       	ldi	r20, 0xFA	; 250
    181c:	54 e4       	ldi	r21, 0x44	; 68
    181e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	f8 01       	movw	r30, r16
    1828:	80 83       	st	Z, r24
    182a:	91 83       	std	Z+1, r25	; 0x01
    182c:	a2 83       	std	Z+2, r26	; 0x02
    182e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1830:	fe 01       	movw	r30, r28
    1832:	e3 5b       	subi	r30, 0xB3	; 179
    1834:	ff 4f       	sbci	r31, 0xFF	; 255
    1836:	60 81       	ld	r22, Z
    1838:	71 81       	ldd	r23, Z+1	; 0x01
    183a:	82 81       	ldd	r24, Z+2	; 0x02
    183c:	93 81       	ldd	r25, Z+3	; 0x03
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	40 e8       	ldi	r20, 0x80	; 128
    1844:	5f e3       	ldi	r21, 0x3F	; 63
    1846:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    184a:	88 23       	and	r24, r24
    184c:	44 f4       	brge	.+16     	; 0x185e <LCD_write_command+0x20a>
		__ticks = 1;
    184e:	fe 01       	movw	r30, r28
    1850:	e5 5b       	subi	r30, 0xB5	; 181
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	91 83       	std	Z+1, r25	; 0x01
    185a:	80 83       	st	Z, r24
    185c:	64 c0       	rjmp	.+200    	; 0x1926 <LCD_write_command+0x2d2>
	else if (__tmp > 65535)
    185e:	fe 01       	movw	r30, r28
    1860:	e3 5b       	subi	r30, 0xB3	; 179
    1862:	ff 4f       	sbci	r31, 0xFF	; 255
    1864:	60 81       	ld	r22, Z
    1866:	71 81       	ldd	r23, Z+1	; 0x01
    1868:	82 81       	ldd	r24, Z+2	; 0x02
    186a:	93 81       	ldd	r25, Z+3	; 0x03
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	3f ef       	ldi	r19, 0xFF	; 255
    1870:	4f e7       	ldi	r20, 0x7F	; 127
    1872:	57 e4       	ldi	r21, 0x47	; 71
    1874:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1878:	18 16       	cp	r1, r24
    187a:	0c f0       	brlt	.+2      	; 0x187e <LCD_write_command+0x22a>
    187c:	43 c0       	rjmp	.+134    	; 0x1904 <LCD_write_command+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    187e:	fe 01       	movw	r30, r28
    1880:	ef 5a       	subi	r30, 0xAF	; 175
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	60 81       	ld	r22, Z
    1886:	71 81       	ldd	r23, Z+1	; 0x01
    1888:	82 81       	ldd	r24, Z+2	; 0x02
    188a:	93 81       	ldd	r25, Z+3	; 0x03
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	40 e2       	ldi	r20, 0x20	; 32
    1892:	51 e4       	ldi	r21, 0x41	; 65
    1894:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	8e 01       	movw	r16, r28
    189e:	05 5b       	subi	r16, 0xB5	; 181
    18a0:	1f 4f       	sbci	r17, 0xFF	; 255
    18a2:	bc 01       	movw	r22, r24
    18a4:	cd 01       	movw	r24, r26
    18a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	f8 01       	movw	r30, r16
    18b0:	91 83       	std	Z+1, r25	; 0x01
    18b2:	80 83       	st	Z, r24
    18b4:	1f c0       	rjmp	.+62     	; 0x18f4 <LCD_write_command+0x2a0>
    18b6:	fe 01       	movw	r30, r28
    18b8:	e7 5b       	subi	r30, 0xB7	; 183
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	88 ec       	ldi	r24, 0xC8	; 200
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	91 83       	std	Z+1, r25	; 0x01
    18c2:	80 83       	st	Z, r24
    18c4:	fe 01       	movw	r30, r28
    18c6:	e7 5b       	subi	r30, 0xB7	; 183
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	80 81       	ld	r24, Z
    18cc:	91 81       	ldd	r25, Z+1	; 0x01
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	f1 f7       	brne	.-4      	; 0x18ce <LCD_write_command+0x27a>
    18d2:	fe 01       	movw	r30, r28
    18d4:	e7 5b       	subi	r30, 0xB7	; 183
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	91 83       	std	Z+1, r25	; 0x01
    18da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18dc:	de 01       	movw	r26, r28
    18de:	a5 5b       	subi	r26, 0xB5	; 181
    18e0:	bf 4f       	sbci	r27, 0xFF	; 255
    18e2:	fe 01       	movw	r30, r28
    18e4:	e5 5b       	subi	r30, 0xB5	; 181
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	80 81       	ld	r24, Z
    18ea:	91 81       	ldd	r25, Z+1	; 0x01
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	11 96       	adiw	r26, 0x01	; 1
    18f0:	9c 93       	st	X, r25
    18f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f4:	fe 01       	movw	r30, r28
    18f6:	e5 5b       	subi	r30, 0xB5	; 181
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	80 81       	ld	r24, Z
    18fc:	91 81       	ldd	r25, Z+1	; 0x01
    18fe:	00 97       	sbiw	r24, 0x00	; 0
    1900:	d1 f6       	brne	.-76     	; 0x18b6 <LCD_write_command+0x262>
    1902:	27 c0       	rjmp	.+78     	; 0x1952 <LCD_write_command+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1904:	8e 01       	movw	r16, r28
    1906:	05 5b       	subi	r16, 0xB5	; 181
    1908:	1f 4f       	sbci	r17, 0xFF	; 255
    190a:	fe 01       	movw	r30, r28
    190c:	e3 5b       	subi	r30, 0xB3	; 179
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	60 81       	ld	r22, Z
    1912:	71 81       	ldd	r23, Z+1	; 0x01
    1914:	82 81       	ldd	r24, Z+2	; 0x02
    1916:	93 81       	ldd	r25, Z+3	; 0x03
    1918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	f8 01       	movw	r30, r16
    1922:	91 83       	std	Z+1, r25	; 0x01
    1924:	80 83       	st	Z, r24
    1926:	de 01       	movw	r26, r28
    1928:	a9 5b       	subi	r26, 0xB9	; 185
    192a:	bf 4f       	sbci	r27, 0xFF	; 255
    192c:	fe 01       	movw	r30, r28
    192e:	e5 5b       	subi	r30, 0xB5	; 181
    1930:	ff 4f       	sbci	r31, 0xFF	; 255
    1932:	80 81       	ld	r24, Z
    1934:	91 81       	ldd	r25, Z+1	; 0x01
    1936:	8d 93       	st	X+, r24
    1938:	9c 93       	st	X, r25
    193a:	fe 01       	movw	r30, r28
    193c:	e9 5b       	subi	r30, 0xB9	; 185
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	80 81       	ld	r24, Z
    1942:	91 81       	ldd	r25, Z+1	; 0x01
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	f1 f7       	brne	.-4      	; 0x1944 <LCD_write_command+0x2f0>
    1948:	fe 01       	movw	r30, r28
    194a:	e9 5b       	subi	r30, 0xB9	; 185
    194c:	ff 4f       	sbci	r31, 0xFF	; 255
    194e:	91 83       	std	Z+1, r25	; 0x01
    1950:	80 83       	st	Z, r24
	_delay_ms(1);

DIO_writepin(LCD_DB7,GET_BIT(command,7));
    1952:	fe 01       	movw	r30, r28
    1954:	ed 59       	subi	r30, 0x9D	; 157
    1956:	ff 4f       	sbci	r31, 0xFF	; 255
    1958:	80 81       	ld	r24, Z
    195a:	98 2f       	mov	r25, r24
    195c:	99 1f       	adc	r25, r25
    195e:	99 27       	eor	r25, r25
    1960:	99 1f       	adc	r25, r25
    1962:	83 e1       	ldi	r24, 0x13	; 19
    1964:	69 2f       	mov	r22, r25
    1966:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>
DIO_writepin(LCD_DB6,GET_BIT(command,6));
    196a:	fe 01       	movw	r30, r28
    196c:	ed 59       	subi	r30, 0x9D	; 157
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	80 81       	ld	r24, Z
    1972:	82 95       	swap	r24
    1974:	86 95       	lsr	r24
    1976:	86 95       	lsr	r24
    1978:	83 70       	andi	r24, 0x03	; 3
    197a:	98 2f       	mov	r25, r24
    197c:	91 70       	andi	r25, 0x01	; 1
    197e:	82 e1       	ldi	r24, 0x12	; 18
    1980:	69 2f       	mov	r22, r25
    1982:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>
DIO_writepin(LCD_DB5,GET_BIT(command,5));
    1986:	fe 01       	movw	r30, r28
    1988:	ed 59       	subi	r30, 0x9D	; 157
    198a:	ff 4f       	sbci	r31, 0xFF	; 255
    198c:	80 81       	ld	r24, Z
    198e:	82 95       	swap	r24
    1990:	86 95       	lsr	r24
    1992:	87 70       	andi	r24, 0x07	; 7
    1994:	98 2f       	mov	r25, r24
    1996:	91 70       	andi	r25, 0x01	; 1
    1998:	81 e1       	ldi	r24, 0x11	; 17
    199a:	69 2f       	mov	r22, r25
    199c:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>
DIO_writepin(LCD_DB4,GET_BIT(command,4));
    19a0:	fe 01       	movw	r30, r28
    19a2:	ed 59       	subi	r30, 0x9D	; 157
    19a4:	ff 4f       	sbci	r31, 0xFF	; 255
    19a6:	80 81       	ld	r24, Z
    19a8:	82 95       	swap	r24
    19aa:	8f 70       	andi	r24, 0x0F	; 15
    19ac:	98 2f       	mov	r25, r24
    19ae:	91 70       	andi	r25, 0x01	; 1
    19b0:	80 e1       	ldi	r24, 0x10	; 16
    19b2:	69 2f       	mov	r22, r25
    19b4:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>
    19b8:	fe 01       	movw	r30, r28
    19ba:	ed 5b       	subi	r30, 0xBD	; 189
    19bc:	ff 4f       	sbci	r31, 0xFF	; 255
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	a0 e8       	ldi	r26, 0x80	; 128
    19c4:	bf e3       	ldi	r27, 0x3F	; 63
    19c6:	80 83       	st	Z, r24
    19c8:	91 83       	std	Z+1, r25	; 0x01
    19ca:	a2 83       	std	Z+2, r26	; 0x02
    19cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ce:	8e 01       	movw	r16, r28
    19d0:	01 5c       	subi	r16, 0xC1	; 193
    19d2:	1f 4f       	sbci	r17, 0xFF	; 255
    19d4:	fe 01       	movw	r30, r28
    19d6:	ed 5b       	subi	r30, 0xBD	; 189
    19d8:	ff 4f       	sbci	r31, 0xFF	; 255
    19da:	60 81       	ld	r22, Z
    19dc:	71 81       	ldd	r23, Z+1	; 0x01
    19de:	82 81       	ldd	r24, Z+2	; 0x02
    19e0:	93 81       	ldd	r25, Z+3	; 0x03
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	4a ef       	ldi	r20, 0xFA	; 250
    19e8:	54 e4       	ldi	r21, 0x44	; 68
    19ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	f8 01       	movw	r30, r16
    19f4:	80 83       	st	Z, r24
    19f6:	91 83       	std	Z+1, r25	; 0x01
    19f8:	a2 83       	std	Z+2, r26	; 0x02
    19fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19fc:	fe 01       	movw	r30, r28
    19fe:	ff 96       	adiw	r30, 0x3f	; 63
    1a00:	60 81       	ld	r22, Z
    1a02:	71 81       	ldd	r23, Z+1	; 0x01
    1a04:	82 81       	ldd	r24, Z+2	; 0x02
    1a06:	93 81       	ldd	r25, Z+3	; 0x03
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	40 e8       	ldi	r20, 0x80	; 128
    1a0e:	5f e3       	ldi	r21, 0x3F	; 63
    1a10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a14:	88 23       	and	r24, r24
    1a16:	2c f4       	brge	.+10     	; 0x1a22 <LCD_write_command+0x3ce>
		__ticks = 1;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	9e af       	std	Y+62, r25	; 0x3e
    1a1e:	8d af       	std	Y+61, r24	; 0x3d
    1a20:	46 c0       	rjmp	.+140    	; 0x1aae <LCD_write_command+0x45a>
	else if (__tmp > 65535)
    1a22:	fe 01       	movw	r30, r28
    1a24:	ff 96       	adiw	r30, 0x3f	; 63
    1a26:	60 81       	ld	r22, Z
    1a28:	71 81       	ldd	r23, Z+1	; 0x01
    1a2a:	82 81       	ldd	r24, Z+2	; 0x02
    1a2c:	93 81       	ldd	r25, Z+3	; 0x03
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	3f ef       	ldi	r19, 0xFF	; 255
    1a32:	4f e7       	ldi	r20, 0x7F	; 127
    1a34:	57 e4       	ldi	r21, 0x47	; 71
    1a36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a3a:	18 16       	cp	r1, r24
    1a3c:	64 f5       	brge	.+88     	; 0x1a96 <LCD_write_command+0x442>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3e:	fe 01       	movw	r30, r28
    1a40:	ed 5b       	subi	r30, 0xBD	; 189
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	60 81       	ld	r22, Z
    1a46:	71 81       	ldd	r23, Z+1	; 0x01
    1a48:	82 81       	ldd	r24, Z+2	; 0x02
    1a4a:	93 81       	ldd	r25, Z+3	; 0x03
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	40 e2       	ldi	r20, 0x20	; 32
    1a52:	51 e4       	ldi	r21, 0x41	; 65
    1a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	bc 01       	movw	r22, r24
    1a5e:	cd 01       	movw	r24, r26
    1a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	9e af       	std	Y+62, r25	; 0x3e
    1a6a:	8d af       	std	Y+61, r24	; 0x3d
    1a6c:	0f c0       	rjmp	.+30     	; 0x1a8c <LCD_write_command+0x438>
    1a6e:	88 ec       	ldi	r24, 0xC8	; 200
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	9c af       	std	Y+60, r25	; 0x3c
    1a74:	8b af       	std	Y+59, r24	; 0x3b
    1a76:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a78:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	f1 f7       	brne	.-4      	; 0x1a7a <LCD_write_command+0x426>
    1a7e:	9c af       	std	Y+60, r25	; 0x3c
    1a80:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a82:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a84:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	9e af       	std	Y+62, r25	; 0x3e
    1a8a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a8e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a90:	00 97       	sbiw	r24, 0x00	; 0
    1a92:	69 f7       	brne	.-38     	; 0x1a6e <LCD_write_command+0x41a>
    1a94:	16 c0       	rjmp	.+44     	; 0x1ac2 <LCD_write_command+0x46e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a96:	fe 01       	movw	r30, r28
    1a98:	ff 96       	adiw	r30, 0x3f	; 63
    1a9a:	60 81       	ld	r22, Z
    1a9c:	71 81       	ldd	r23, Z+1	; 0x01
    1a9e:	82 81       	ldd	r24, Z+2	; 0x02
    1aa0:	93 81       	ldd	r25, Z+3	; 0x03
    1aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	9e af       	std	Y+62, r25	; 0x3e
    1aac:	8d af       	std	Y+61, r24	; 0x3d
    1aae:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ab0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ab2:	9a af       	std	Y+58, r25	; 0x3a
    1ab4:	89 af       	std	Y+57, r24	; 0x39
    1ab6:	89 ad       	ldd	r24, Y+57	; 0x39
    1ab8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	f1 f7       	brne	.-4      	; 0x1aba <LCD_write_command+0x466>
    1abe:	9a af       	std	Y+58, r25	; 0x3a
    1ac0:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(1);

    DIO_writepin(E,LOW);
    1ac2:	89 e1       	ldi	r24, 0x19	; 25
    1ac4:	60 e0       	ldi	r22, 0x00	; 0
    1ac6:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	a0 e8       	ldi	r26, 0x80	; 128
    1ad0:	bf e3       	ldi	r27, 0x3F	; 63
    1ad2:	8d ab       	std	Y+53, r24	; 0x35
    1ad4:	9e ab       	std	Y+54, r25	; 0x36
    1ad6:	af ab       	std	Y+55, r26	; 0x37
    1ad8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ada:	6d a9       	ldd	r22, Y+53	; 0x35
    1adc:	7e a9       	ldd	r23, Y+54	; 0x36
    1ade:	8f a9       	ldd	r24, Y+55	; 0x37
    1ae0:	98 ad       	ldd	r25, Y+56	; 0x38
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	4a ef       	ldi	r20, 0xFA	; 250
    1ae8:	54 e4       	ldi	r21, 0x44	; 68
    1aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	89 ab       	std	Y+49, r24	; 0x31
    1af4:	9a ab       	std	Y+50, r25	; 0x32
    1af6:	ab ab       	std	Y+51, r26	; 0x33
    1af8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1afa:	69 a9       	ldd	r22, Y+49	; 0x31
    1afc:	7a a9       	ldd	r23, Y+50	; 0x32
    1afe:	8b a9       	ldd	r24, Y+51	; 0x33
    1b00:	9c a9       	ldd	r25, Y+52	; 0x34
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	40 e8       	ldi	r20, 0x80	; 128
    1b08:	5f e3       	ldi	r21, 0x3F	; 63
    1b0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b0e:	88 23       	and	r24, r24
    1b10:	2c f4       	brge	.+10     	; 0x1b1c <LCD_write_command+0x4c8>
		__ticks = 1;
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	98 ab       	std	Y+48, r25	; 0x30
    1b18:	8f a7       	std	Y+47, r24	; 0x2f
    1b1a:	3f c0       	rjmp	.+126    	; 0x1b9a <LCD_write_command+0x546>
	else if (__tmp > 65535)
    1b1c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b1e:	7a a9       	ldd	r23, Y+50	; 0x32
    1b20:	8b a9       	ldd	r24, Y+51	; 0x33
    1b22:	9c a9       	ldd	r25, Y+52	; 0x34
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	3f ef       	ldi	r19, 0xFF	; 255
    1b28:	4f e7       	ldi	r20, 0x7F	; 127
    1b2a:	57 e4       	ldi	r21, 0x47	; 71
    1b2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b30:	18 16       	cp	r1, r24
    1b32:	4c f5       	brge	.+82     	; 0x1b86 <LCD_write_command+0x532>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b34:	6d a9       	ldd	r22, Y+53	; 0x35
    1b36:	7e a9       	ldd	r23, Y+54	; 0x36
    1b38:	8f a9       	ldd	r24, Y+55	; 0x37
    1b3a:	98 ad       	ldd	r25, Y+56	; 0x38
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	40 e2       	ldi	r20, 0x20	; 32
    1b42:	51 e4       	ldi	r21, 0x41	; 65
    1b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	bc 01       	movw	r22, r24
    1b4e:	cd 01       	movw	r24, r26
    1b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	98 ab       	std	Y+48, r25	; 0x30
    1b5a:	8f a7       	std	Y+47, r24	; 0x2f
    1b5c:	0f c0       	rjmp	.+30     	; 0x1b7c <LCD_write_command+0x528>
    1b5e:	88 ec       	ldi	r24, 0xC8	; 200
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	9e a7       	std	Y+46, r25	; 0x2e
    1b64:	8d a7       	std	Y+45, r24	; 0x2d
    1b66:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b68:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	f1 f7       	brne	.-4      	; 0x1b6a <LCD_write_command+0x516>
    1b6e:	9e a7       	std	Y+46, r25	; 0x2e
    1b70:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b72:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b74:	98 a9       	ldd	r25, Y+48	; 0x30
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	98 ab       	std	Y+48, r25	; 0x30
    1b7a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b7e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	69 f7       	brne	.-38     	; 0x1b5e <LCD_write_command+0x50a>
    1b84:	14 c0       	rjmp	.+40     	; 0x1bae <LCD_write_command+0x55a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b86:	69 a9       	ldd	r22, Y+49	; 0x31
    1b88:	7a a9       	ldd	r23, Y+50	; 0x32
    1b8a:	8b a9       	ldd	r24, Y+51	; 0x33
    1b8c:	9c a9       	ldd	r25, Y+52	; 0x34
    1b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	98 ab       	std	Y+48, r25	; 0x30
    1b98:	8f a7       	std	Y+47, r24	; 0x2f
    1b9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b9c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b9e:	9c a7       	std	Y+44, r25	; 0x2c
    1ba0:	8b a7       	std	Y+43, r24	; 0x2b
    1ba2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ba4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	f1 f7       	brne	.-4      	; 0x1ba6 <LCD_write_command+0x552>
    1baa:	9c a7       	std	Y+44, r25	; 0x2c
    1bac:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	DIO_writepin(E,HIGH);
    1bae:	89 e1       	ldi	r24, 0x19	; 25
    1bb0:	61 e0       	ldi	r22, 0x01	; 1
    1bb2:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	a0 e8       	ldi	r26, 0x80	; 128
    1bbc:	bf e3       	ldi	r27, 0x3F	; 63
    1bbe:	8f a3       	std	Y+39, r24	; 0x27
    1bc0:	98 a7       	std	Y+40, r25	; 0x28
    1bc2:	a9 a7       	std	Y+41, r26	; 0x29
    1bc4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc6:	6f a1       	ldd	r22, Y+39	; 0x27
    1bc8:	78 a5       	ldd	r23, Y+40	; 0x28
    1bca:	89 a5       	ldd	r24, Y+41	; 0x29
    1bcc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	4a ef       	ldi	r20, 0xFA	; 250
    1bd4:	54 e4       	ldi	r21, 0x44	; 68
    1bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	8b a3       	std	Y+35, r24	; 0x23
    1be0:	9c a3       	std	Y+36, r25	; 0x24
    1be2:	ad a3       	std	Y+37, r26	; 0x25
    1be4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1be6:	6b a1       	ldd	r22, Y+35	; 0x23
    1be8:	7c a1       	ldd	r23, Y+36	; 0x24
    1bea:	8d a1       	ldd	r24, Y+37	; 0x25
    1bec:	9e a1       	ldd	r25, Y+38	; 0x26
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	40 e8       	ldi	r20, 0x80	; 128
    1bf4:	5f e3       	ldi	r21, 0x3F	; 63
    1bf6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bfa:	88 23       	and	r24, r24
    1bfc:	2c f4       	brge	.+10     	; 0x1c08 <LCD_write_command+0x5b4>
		__ticks = 1;
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	9a a3       	std	Y+34, r25	; 0x22
    1c04:	89 a3       	std	Y+33, r24	; 0x21
    1c06:	3f c0       	rjmp	.+126    	; 0x1c86 <LCD_write_command+0x632>
	else if (__tmp > 65535)
    1c08:	6b a1       	ldd	r22, Y+35	; 0x23
    1c0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	3f ef       	ldi	r19, 0xFF	; 255
    1c14:	4f e7       	ldi	r20, 0x7F	; 127
    1c16:	57 e4       	ldi	r21, 0x47	; 71
    1c18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c1c:	18 16       	cp	r1, r24
    1c1e:	4c f5       	brge	.+82     	; 0x1c72 <LCD_write_command+0x61e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c20:	6f a1       	ldd	r22, Y+39	; 0x27
    1c22:	78 a5       	ldd	r23, Y+40	; 0x28
    1c24:	89 a5       	ldd	r24, Y+41	; 0x29
    1c26:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	40 e2       	ldi	r20, 0x20	; 32
    1c2e:	51 e4       	ldi	r21, 0x41	; 65
    1c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	bc 01       	movw	r22, r24
    1c3a:	cd 01       	movw	r24, r26
    1c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	9a a3       	std	Y+34, r25	; 0x22
    1c46:	89 a3       	std	Y+33, r24	; 0x21
    1c48:	0f c0       	rjmp	.+30     	; 0x1c68 <LCD_write_command+0x614>
    1c4a:	88 ec       	ldi	r24, 0xC8	; 200
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	98 a3       	std	Y+32, r25	; 0x20
    1c50:	8f 8f       	std	Y+31, r24	; 0x1f
    1c52:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c54:	98 a1       	ldd	r25, Y+32	; 0x20
    1c56:	01 97       	sbiw	r24, 0x01	; 1
    1c58:	f1 f7       	brne	.-4      	; 0x1c56 <LCD_write_command+0x602>
    1c5a:	98 a3       	std	Y+32, r25	; 0x20
    1c5c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c5e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c60:	9a a1       	ldd	r25, Y+34	; 0x22
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	9a a3       	std	Y+34, r25	; 0x22
    1c66:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c68:	89 a1       	ldd	r24, Y+33	; 0x21
    1c6a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c6c:	00 97       	sbiw	r24, 0x00	; 0
    1c6e:	69 f7       	brne	.-38     	; 0x1c4a <LCD_write_command+0x5f6>
    1c70:	14 c0       	rjmp	.+40     	; 0x1c9a <LCD_write_command+0x646>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c72:	6b a1       	ldd	r22, Y+35	; 0x23
    1c74:	7c a1       	ldd	r23, Y+36	; 0x24
    1c76:	8d a1       	ldd	r24, Y+37	; 0x25
    1c78:	9e a1       	ldd	r25, Y+38	; 0x26
    1c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	9a a3       	std	Y+34, r25	; 0x22
    1c84:	89 a3       	std	Y+33, r24	; 0x21
    1c86:	89 a1       	ldd	r24, Y+33	; 0x21
    1c88:	9a a1       	ldd	r25, Y+34	; 0x22
    1c8a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c8c:	8d 8f       	std	Y+29, r24	; 0x1d
    1c8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c90:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	f1 f7       	brne	.-4      	; 0x1c92 <LCD_write_command+0x63e>
    1c96:	9e 8f       	std	Y+30, r25	; 0x1e
    1c98:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	DIO_writepin(LCD_DB7,GET_BIT(command,3));
    1c9a:	fe 01       	movw	r30, r28
    1c9c:	ed 59       	subi	r30, 0x9D	; 157
    1c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca0:	80 81       	ld	r24, Z
    1ca2:	86 95       	lsr	r24
    1ca4:	86 95       	lsr	r24
    1ca6:	86 95       	lsr	r24
    1ca8:	98 2f       	mov	r25, r24
    1caa:	91 70       	andi	r25, 0x01	; 1
    1cac:	83 e1       	ldi	r24, 0x13	; 19
    1cae:	69 2f       	mov	r22, r25
    1cb0:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>
	DIO_writepin(LCD_DB6,GET_BIT(command,2));
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	ed 59       	subi	r30, 0x9D	; 157
    1cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cba:	80 81       	ld	r24, Z
    1cbc:	86 95       	lsr	r24
    1cbe:	86 95       	lsr	r24
    1cc0:	98 2f       	mov	r25, r24
    1cc2:	91 70       	andi	r25, 0x01	; 1
    1cc4:	82 e1       	ldi	r24, 0x12	; 18
    1cc6:	69 2f       	mov	r22, r25
    1cc8:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>
	DIO_writepin(LCD_DB5,GET_BIT(command,1));
    1ccc:	fe 01       	movw	r30, r28
    1cce:	ed 59       	subi	r30, 0x9D	; 157
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	80 81       	ld	r24, Z
    1cd4:	86 95       	lsr	r24
    1cd6:	98 2f       	mov	r25, r24
    1cd8:	91 70       	andi	r25, 0x01	; 1
    1cda:	81 e1       	ldi	r24, 0x11	; 17
    1cdc:	69 2f       	mov	r22, r25
    1cde:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>
	DIO_writepin(LCD_DB4,GET_BIT(command,0));
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	ed 59       	subi	r30, 0x9D	; 157
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	80 81       	ld	r24, Z
    1cea:	98 2f       	mov	r25, r24
    1cec:	91 70       	andi	r25, 0x01	; 1
    1cee:	80 e1       	ldi	r24, 0x10	; 16
    1cf0:	69 2f       	mov	r22, r25
    1cf2:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	a0 e8       	ldi	r26, 0x80	; 128
    1cfc:	bf e3       	ldi	r27, 0x3F	; 63
    1cfe:	89 8f       	std	Y+25, r24	; 0x19
    1d00:	9a 8f       	std	Y+26, r25	; 0x1a
    1d02:	ab 8f       	std	Y+27, r26	; 0x1b
    1d04:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d06:	69 8d       	ldd	r22, Y+25	; 0x19
    1d08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	4a ef       	ldi	r20, 0xFA	; 250
    1d14:	54 e4       	ldi	r21, 0x44	; 68
    1d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	8d 8b       	std	Y+21, r24	; 0x15
    1d20:	9e 8b       	std	Y+22, r25	; 0x16
    1d22:	af 8b       	std	Y+23, r26	; 0x17
    1d24:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d26:	6d 89       	ldd	r22, Y+21	; 0x15
    1d28:	7e 89       	ldd	r23, Y+22	; 0x16
    1d2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	40 e8       	ldi	r20, 0x80	; 128
    1d34:	5f e3       	ldi	r21, 0x3F	; 63
    1d36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d3a:	88 23       	and	r24, r24
    1d3c:	2c f4       	brge	.+10     	; 0x1d48 <LCD_write_command+0x6f4>
		__ticks = 1;
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	9c 8b       	std	Y+20, r25	; 0x14
    1d44:	8b 8b       	std	Y+19, r24	; 0x13
    1d46:	3f c0       	rjmp	.+126    	; 0x1dc6 <LCD_write_command+0x772>
	else if (__tmp > 65535)
    1d48:	6d 89       	ldd	r22, Y+21	; 0x15
    1d4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	3f ef       	ldi	r19, 0xFF	; 255
    1d54:	4f e7       	ldi	r20, 0x7F	; 127
    1d56:	57 e4       	ldi	r21, 0x47	; 71
    1d58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d5c:	18 16       	cp	r1, r24
    1d5e:	4c f5       	brge	.+82     	; 0x1db2 <LCD_write_command+0x75e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d60:	69 8d       	ldd	r22, Y+25	; 0x19
    1d62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	40 e2       	ldi	r20, 0x20	; 32
    1d6e:	51 e4       	ldi	r21, 0x41	; 65
    1d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	bc 01       	movw	r22, r24
    1d7a:	cd 01       	movw	r24, r26
    1d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	9c 8b       	std	Y+20, r25	; 0x14
    1d86:	8b 8b       	std	Y+19, r24	; 0x13
    1d88:	0f c0       	rjmp	.+30     	; 0x1da8 <LCD_write_command+0x754>
    1d8a:	88 ec       	ldi	r24, 0xC8	; 200
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	9a 8b       	std	Y+18, r25	; 0x12
    1d90:	89 8b       	std	Y+17, r24	; 0x11
    1d92:	89 89       	ldd	r24, Y+17	; 0x11
    1d94:	9a 89       	ldd	r25, Y+18	; 0x12
    1d96:	01 97       	sbiw	r24, 0x01	; 1
    1d98:	f1 f7       	brne	.-4      	; 0x1d96 <LCD_write_command+0x742>
    1d9a:	9a 8b       	std	Y+18, r25	; 0x12
    1d9c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1da0:	9c 89       	ldd	r25, Y+20	; 0x14
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	9c 8b       	std	Y+20, r25	; 0x14
    1da6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da8:	8b 89       	ldd	r24, Y+19	; 0x13
    1daa:	9c 89       	ldd	r25, Y+20	; 0x14
    1dac:	00 97       	sbiw	r24, 0x00	; 0
    1dae:	69 f7       	brne	.-38     	; 0x1d8a <LCD_write_command+0x736>
    1db0:	14 c0       	rjmp	.+40     	; 0x1dda <LCD_write_command+0x786>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db2:	6d 89       	ldd	r22, Y+21	; 0x15
    1db4:	7e 89       	ldd	r23, Y+22	; 0x16
    1db6:	8f 89       	ldd	r24, Y+23	; 0x17
    1db8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	9c 8b       	std	Y+20, r25	; 0x14
    1dc4:	8b 8b       	std	Y+19, r24	; 0x13
    1dc6:	8b 89       	ldd	r24, Y+19	; 0x13
    1dc8:	9c 89       	ldd	r25, Y+20	; 0x14
    1dca:	98 8b       	std	Y+16, r25	; 0x10
    1dcc:	8f 87       	std	Y+15, r24	; 0x0f
    1dce:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dd0:	98 89       	ldd	r25, Y+16	; 0x10
    1dd2:	01 97       	sbiw	r24, 0x01	; 1
    1dd4:	f1 f7       	brne	.-4      	; 0x1dd2 <LCD_write_command+0x77e>
    1dd6:	98 8b       	std	Y+16, r25	; 0x10
    1dd8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);

		DIO_writepin(E,LOW);
    1dda:	89 e1       	ldi	r24, 0x19	; 25
    1ddc:	60 e0       	ldi	r22, 0x00	; 0
    1dde:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	a0 e8       	ldi	r26, 0x80	; 128
    1de8:	bf e3       	ldi	r27, 0x3F	; 63
    1dea:	8b 87       	std	Y+11, r24	; 0x0b
    1dec:	9c 87       	std	Y+12, r25	; 0x0c
    1dee:	ad 87       	std	Y+13, r26	; 0x0d
    1df0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	4a ef       	ldi	r20, 0xFA	; 250
    1e00:	54 e4       	ldi	r21, 0x44	; 68
    1e02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	8f 83       	std	Y+7, r24	; 0x07
    1e0c:	98 87       	std	Y+8, r25	; 0x08
    1e0e:	a9 87       	std	Y+9, r26	; 0x09
    1e10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e12:	6f 81       	ldd	r22, Y+7	; 0x07
    1e14:	78 85       	ldd	r23, Y+8	; 0x08
    1e16:	89 85       	ldd	r24, Y+9	; 0x09
    1e18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	40 e8       	ldi	r20, 0x80	; 128
    1e20:	5f e3       	ldi	r21, 0x3F	; 63
    1e22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e26:	88 23       	and	r24, r24
    1e28:	2c f4       	brge	.+10     	; 0x1e34 <LCD_write_command+0x7e0>
		__ticks = 1;
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	9e 83       	std	Y+6, r25	; 0x06
    1e30:	8d 83       	std	Y+5, r24	; 0x05
    1e32:	3f c0       	rjmp	.+126    	; 0x1eb2 <LCD_write_command+0x85e>
	else if (__tmp > 65535)
    1e34:	6f 81       	ldd	r22, Y+7	; 0x07
    1e36:	78 85       	ldd	r23, Y+8	; 0x08
    1e38:	89 85       	ldd	r24, Y+9	; 0x09
    1e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	3f ef       	ldi	r19, 0xFF	; 255
    1e40:	4f e7       	ldi	r20, 0x7F	; 127
    1e42:	57 e4       	ldi	r21, 0x47	; 71
    1e44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e48:	18 16       	cp	r1, r24
    1e4a:	4c f5       	brge	.+82     	; 0x1e9e <LCD_write_command+0x84a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	40 e2       	ldi	r20, 0x20	; 32
    1e5a:	51 e4       	ldi	r21, 0x41	; 65
    1e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	bc 01       	movw	r22, r24
    1e66:	cd 01       	movw	r24, r26
    1e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	9e 83       	std	Y+6, r25	; 0x06
    1e72:	8d 83       	std	Y+5, r24	; 0x05
    1e74:	0f c0       	rjmp	.+30     	; 0x1e94 <LCD_write_command+0x840>
    1e76:	88 ec       	ldi	r24, 0xC8	; 200
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	9c 83       	std	Y+4, r25	; 0x04
    1e7c:	8b 83       	std	Y+3, r24	; 0x03
    1e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e80:	9c 81       	ldd	r25, Y+4	; 0x04
    1e82:	01 97       	sbiw	r24, 0x01	; 1
    1e84:	f1 f7       	brne	.-4      	; 0x1e82 <LCD_write_command+0x82e>
    1e86:	9c 83       	std	Y+4, r25	; 0x04
    1e88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8e:	01 97       	sbiw	r24, 0x01	; 1
    1e90:	9e 83       	std	Y+6, r25	; 0x06
    1e92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e94:	8d 81       	ldd	r24, Y+5	; 0x05
    1e96:	9e 81       	ldd	r25, Y+6	; 0x06
    1e98:	00 97       	sbiw	r24, 0x00	; 0
    1e9a:	69 f7       	brne	.-38     	; 0x1e76 <LCD_write_command+0x822>
    1e9c:	14 c0       	rjmp	.+40     	; 0x1ec6 <LCD_write_command+0x872>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea0:	78 85       	ldd	r23, Y+8	; 0x08
    1ea2:	89 85       	ldd	r24, Y+9	; 0x09
    1ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	9e 83       	std	Y+6, r25	; 0x06
    1eb0:	8d 83       	std	Y+5, r24	; 0x05
    1eb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb6:	9a 83       	std	Y+2, r25	; 0x02
    1eb8:	89 83       	std	Y+1, r24	; 0x01
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
    1ebc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ebe:	01 97       	sbiw	r24, 0x01	; 1
    1ec0:	f1 f7       	brne	.-4      	; 0x1ebe <LCD_write_command+0x86a>
    1ec2:	9a 83       	std	Y+2, r25	; 0x02
    1ec4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);



#endif
}
    1ec6:	cd 59       	subi	r28, 0x9D	; 157
    1ec8:	df 4f       	sbci	r29, 0xFF	; 255
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	f8 94       	cli
    1ece:	de bf       	out	0x3e, r29	; 62
    1ed0:	0f be       	out	0x3f, r0	; 63
    1ed2:	cd bf       	out	0x3d, r28	; 61
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	1f 91       	pop	r17
    1eda:	0f 91       	pop	r16
    1edc:	08 95       	ret

00001ede <LCD_init>:

void LCD_init(void){
    1ede:	0f 93       	push	r16
    1ee0:	1f 93       	push	r17
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
    1eea:	c4 55       	subi	r28, 0x54	; 84
    1eec:	d0 40       	sbci	r29, 0x00	; 0
    1eee:	0f b6       	in	r0, 0x3f	; 63
    1ef0:	f8 94       	cli
    1ef2:	de bf       	out	0x3e, r29	; 62
    1ef4:	0f be       	out	0x3f, r0	; 63
    1ef6:	cd bf       	out	0x3d, r28	; 61
    1ef8:	fe 01       	movw	r30, r28
    1efa:	ef 5a       	subi	r30, 0xAF	; 175
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	a8 ef       	ldi	r26, 0xF8	; 248
    1f04:	b1 e4       	ldi	r27, 0x41	; 65
    1f06:	80 83       	st	Z, r24
    1f08:	91 83       	std	Z+1, r25	; 0x01
    1f0a:	a2 83       	std	Z+2, r26	; 0x02
    1f0c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0e:	8e 01       	movw	r16, r28
    1f10:	03 5b       	subi	r16, 0xB3	; 179
    1f12:	1f 4f       	sbci	r17, 0xFF	; 255
    1f14:	fe 01       	movw	r30, r28
    1f16:	ef 5a       	subi	r30, 0xAF	; 175
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	60 81       	ld	r22, Z
    1f1c:	71 81       	ldd	r23, Z+1	; 0x01
    1f1e:	82 81       	ldd	r24, Z+2	; 0x02
    1f20:	93 81       	ldd	r25, Z+3	; 0x03
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	4a ef       	ldi	r20, 0xFA	; 250
    1f28:	54 e4       	ldi	r21, 0x44	; 68
    1f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	f8 01       	movw	r30, r16
    1f34:	80 83       	st	Z, r24
    1f36:	91 83       	std	Z+1, r25	; 0x01
    1f38:	a2 83       	std	Z+2, r26	; 0x02
    1f3a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	e3 5b       	subi	r30, 0xB3	; 179
    1f40:	ff 4f       	sbci	r31, 0xFF	; 255
    1f42:	60 81       	ld	r22, Z
    1f44:	71 81       	ldd	r23, Z+1	; 0x01
    1f46:	82 81       	ldd	r24, Z+2	; 0x02
    1f48:	93 81       	ldd	r25, Z+3	; 0x03
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	40 e8       	ldi	r20, 0x80	; 128
    1f50:	5f e3       	ldi	r21, 0x3F	; 63
    1f52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f56:	88 23       	and	r24, r24
    1f58:	44 f4       	brge	.+16     	; 0x1f6a <LCD_init+0x8c>
		__ticks = 1;
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	e5 5b       	subi	r30, 0xB5	; 181
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	91 83       	std	Z+1, r25	; 0x01
    1f66:	80 83       	st	Z, r24
    1f68:	64 c0       	rjmp	.+200    	; 0x2032 <LCD_init+0x154>
	else if (__tmp > 65535)
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	e3 5b       	subi	r30, 0xB3	; 179
    1f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f70:	60 81       	ld	r22, Z
    1f72:	71 81       	ldd	r23, Z+1	; 0x01
    1f74:	82 81       	ldd	r24, Z+2	; 0x02
    1f76:	93 81       	ldd	r25, Z+3	; 0x03
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	3f ef       	ldi	r19, 0xFF	; 255
    1f7c:	4f e7       	ldi	r20, 0x7F	; 127
    1f7e:	57 e4       	ldi	r21, 0x47	; 71
    1f80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f84:	18 16       	cp	r1, r24
    1f86:	0c f0       	brlt	.+2      	; 0x1f8a <LCD_init+0xac>
    1f88:	43 c0       	rjmp	.+134    	; 0x2010 <LCD_init+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f8a:	fe 01       	movw	r30, r28
    1f8c:	ef 5a       	subi	r30, 0xAF	; 175
    1f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f90:	60 81       	ld	r22, Z
    1f92:	71 81       	ldd	r23, Z+1	; 0x01
    1f94:	82 81       	ldd	r24, Z+2	; 0x02
    1f96:	93 81       	ldd	r25, Z+3	; 0x03
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e2       	ldi	r20, 0x20	; 32
    1f9e:	51 e4       	ldi	r21, 0x41	; 65
    1fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	8e 01       	movw	r16, r28
    1faa:	05 5b       	subi	r16, 0xB5	; 181
    1fac:	1f 4f       	sbci	r17, 0xFF	; 255
    1fae:	bc 01       	movw	r22, r24
    1fb0:	cd 01       	movw	r24, r26
    1fb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	f8 01       	movw	r30, r16
    1fbc:	91 83       	std	Z+1, r25	; 0x01
    1fbe:	80 83       	st	Z, r24
    1fc0:	1f c0       	rjmp	.+62     	; 0x2000 <LCD_init+0x122>
    1fc2:	fe 01       	movw	r30, r28
    1fc4:	e7 5b       	subi	r30, 0xB7	; 183
    1fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc8:	88 ec       	ldi	r24, 0xC8	; 200
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	91 83       	std	Z+1, r25	; 0x01
    1fce:	80 83       	st	Z, r24
    1fd0:	fe 01       	movw	r30, r28
    1fd2:	e7 5b       	subi	r30, 0xB7	; 183
    1fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd6:	80 81       	ld	r24, Z
    1fd8:	91 81       	ldd	r25, Z+1	; 0x01
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	f1 f7       	brne	.-4      	; 0x1fda <LCD_init+0xfc>
    1fde:	fe 01       	movw	r30, r28
    1fe0:	e7 5b       	subi	r30, 0xB7	; 183
    1fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe4:	91 83       	std	Z+1, r25	; 0x01
    1fe6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe8:	de 01       	movw	r26, r28
    1fea:	a5 5b       	subi	r26, 0xB5	; 181
    1fec:	bf 4f       	sbci	r27, 0xFF	; 255
    1fee:	fe 01       	movw	r30, r28
    1ff0:	e5 5b       	subi	r30, 0xB5	; 181
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	80 81       	ld	r24, Z
    1ff6:	91 81       	ldd	r25, Z+1	; 0x01
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	11 96       	adiw	r26, 0x01	; 1
    1ffc:	9c 93       	st	X, r25
    1ffe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2000:	fe 01       	movw	r30, r28
    2002:	e5 5b       	subi	r30, 0xB5	; 181
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	80 81       	ld	r24, Z
    2008:	91 81       	ldd	r25, Z+1	; 0x01
    200a:	00 97       	sbiw	r24, 0x00	; 0
    200c:	d1 f6       	brne	.-76     	; 0x1fc2 <LCD_init+0xe4>
    200e:	27 c0       	rjmp	.+78     	; 0x205e <LCD_init+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2010:	8e 01       	movw	r16, r28
    2012:	05 5b       	subi	r16, 0xB5	; 181
    2014:	1f 4f       	sbci	r17, 0xFF	; 255
    2016:	fe 01       	movw	r30, r28
    2018:	e3 5b       	subi	r30, 0xB3	; 179
    201a:	ff 4f       	sbci	r31, 0xFF	; 255
    201c:	60 81       	ld	r22, Z
    201e:	71 81       	ldd	r23, Z+1	; 0x01
    2020:	82 81       	ldd	r24, Z+2	; 0x02
    2022:	93 81       	ldd	r25, Z+3	; 0x03
    2024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	f8 01       	movw	r30, r16
    202e:	91 83       	std	Z+1, r25	; 0x01
    2030:	80 83       	st	Z, r24
    2032:	de 01       	movw	r26, r28
    2034:	a9 5b       	subi	r26, 0xB9	; 185
    2036:	bf 4f       	sbci	r27, 0xFF	; 255
    2038:	fe 01       	movw	r30, r28
    203a:	e5 5b       	subi	r30, 0xB5	; 181
    203c:	ff 4f       	sbci	r31, 0xFF	; 255
    203e:	80 81       	ld	r24, Z
    2040:	91 81       	ldd	r25, Z+1	; 0x01
    2042:	8d 93       	st	X+, r24
    2044:	9c 93       	st	X, r25
    2046:	fe 01       	movw	r30, r28
    2048:	e9 5b       	subi	r30, 0xB9	; 185
    204a:	ff 4f       	sbci	r31, 0xFF	; 255
    204c:	80 81       	ld	r24, Z
    204e:	91 81       	ldd	r25, Z+1	; 0x01
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	f1 f7       	brne	.-4      	; 0x2050 <LCD_init+0x172>
    2054:	fe 01       	movw	r30, r28
    2056:	e9 5b       	subi	r30, 0xB9	; 185
    2058:	ff 4f       	sbci	r31, 0xFF	; 255
    205a:	91 83       	std	Z+1, r25	; 0x01
    205c:	80 83       	st	Z, r24
	LCD_write_command(0x01);

	_delay_ms(2);
#elif(LCD_MODE==MODE_4_BITS)
	_delay_ms(31);
		LCD_write_command(0x38);
    205e:	88 e3       	ldi	r24, 0x38	; 56
    2060:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_write_command>
    2064:	fe 01       	movw	r30, r28
    2066:	ed 5b       	subi	r30, 0xBD	; 189
    2068:	ff 4f       	sbci	r31, 0xFF	; 255
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	a0 e8       	ldi	r26, 0x80	; 128
    2070:	bf e3       	ldi	r27, 0x3F	; 63
    2072:	80 83       	st	Z, r24
    2074:	91 83       	std	Z+1, r25	; 0x01
    2076:	a2 83       	std	Z+2, r26	; 0x02
    2078:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207a:	8e 01       	movw	r16, r28
    207c:	01 5c       	subi	r16, 0xC1	; 193
    207e:	1f 4f       	sbci	r17, 0xFF	; 255
    2080:	fe 01       	movw	r30, r28
    2082:	ed 5b       	subi	r30, 0xBD	; 189
    2084:	ff 4f       	sbci	r31, 0xFF	; 255
    2086:	60 81       	ld	r22, Z
    2088:	71 81       	ldd	r23, Z+1	; 0x01
    208a:	82 81       	ldd	r24, Z+2	; 0x02
    208c:	93 81       	ldd	r25, Z+3	; 0x03
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	4a ef       	ldi	r20, 0xFA	; 250
    2094:	54 e4       	ldi	r21, 0x44	; 68
    2096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	f8 01       	movw	r30, r16
    20a0:	80 83       	st	Z, r24
    20a2:	91 83       	std	Z+1, r25	; 0x01
    20a4:	a2 83       	std	Z+2, r26	; 0x02
    20a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20a8:	fe 01       	movw	r30, r28
    20aa:	ff 96       	adiw	r30, 0x3f	; 63
    20ac:	60 81       	ld	r22, Z
    20ae:	71 81       	ldd	r23, Z+1	; 0x01
    20b0:	82 81       	ldd	r24, Z+2	; 0x02
    20b2:	93 81       	ldd	r25, Z+3	; 0x03
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e8       	ldi	r20, 0x80	; 128
    20ba:	5f e3       	ldi	r21, 0x3F	; 63
    20bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c0:	88 23       	and	r24, r24
    20c2:	2c f4       	brge	.+10     	; 0x20ce <LCD_init+0x1f0>
		__ticks = 1;
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	9e af       	std	Y+62, r25	; 0x3e
    20ca:	8d af       	std	Y+61, r24	; 0x3d
    20cc:	46 c0       	rjmp	.+140    	; 0x215a <LCD_init+0x27c>
	else if (__tmp > 65535)
    20ce:	fe 01       	movw	r30, r28
    20d0:	ff 96       	adiw	r30, 0x3f	; 63
    20d2:	60 81       	ld	r22, Z
    20d4:	71 81       	ldd	r23, Z+1	; 0x01
    20d6:	82 81       	ldd	r24, Z+2	; 0x02
    20d8:	93 81       	ldd	r25, Z+3	; 0x03
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	3f ef       	ldi	r19, 0xFF	; 255
    20de:	4f e7       	ldi	r20, 0x7F	; 127
    20e0:	57 e4       	ldi	r21, 0x47	; 71
    20e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e6:	18 16       	cp	r1, r24
    20e8:	64 f5       	brge	.+88     	; 0x2142 <LCD_init+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ea:	fe 01       	movw	r30, r28
    20ec:	ed 5b       	subi	r30, 0xBD	; 189
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	60 81       	ld	r22, Z
    20f2:	71 81       	ldd	r23, Z+1	; 0x01
    20f4:	82 81       	ldd	r24, Z+2	; 0x02
    20f6:	93 81       	ldd	r25, Z+3	; 0x03
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	40 e2       	ldi	r20, 0x20	; 32
    20fe:	51 e4       	ldi	r21, 0x41	; 65
    2100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	bc 01       	movw	r22, r24
    210a:	cd 01       	movw	r24, r26
    210c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	9e af       	std	Y+62, r25	; 0x3e
    2116:	8d af       	std	Y+61, r24	; 0x3d
    2118:	0f c0       	rjmp	.+30     	; 0x2138 <LCD_init+0x25a>
    211a:	88 ec       	ldi	r24, 0xC8	; 200
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	9c af       	std	Y+60, r25	; 0x3c
    2120:	8b af       	std	Y+59, r24	; 0x3b
    2122:	8b ad       	ldd	r24, Y+59	; 0x3b
    2124:	9c ad       	ldd	r25, Y+60	; 0x3c
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	f1 f7       	brne	.-4      	; 0x2126 <LCD_init+0x248>
    212a:	9c af       	std	Y+60, r25	; 0x3c
    212c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2130:	9e ad       	ldd	r25, Y+62	; 0x3e
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	9e af       	std	Y+62, r25	; 0x3e
    2136:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2138:	8d ad       	ldd	r24, Y+61	; 0x3d
    213a:	9e ad       	ldd	r25, Y+62	; 0x3e
    213c:	00 97       	sbiw	r24, 0x00	; 0
    213e:	69 f7       	brne	.-38     	; 0x211a <LCD_init+0x23c>
    2140:	16 c0       	rjmp	.+44     	; 0x216e <LCD_init+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2142:	fe 01       	movw	r30, r28
    2144:	ff 96       	adiw	r30, 0x3f	; 63
    2146:	60 81       	ld	r22, Z
    2148:	71 81       	ldd	r23, Z+1	; 0x01
    214a:	82 81       	ldd	r24, Z+2	; 0x02
    214c:	93 81       	ldd	r25, Z+3	; 0x03
    214e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	9e af       	std	Y+62, r25	; 0x3e
    2158:	8d af       	std	Y+61, r24	; 0x3d
    215a:	8d ad       	ldd	r24, Y+61	; 0x3d
    215c:	9e ad       	ldd	r25, Y+62	; 0x3e
    215e:	9a af       	std	Y+58, r25	; 0x3a
    2160:	89 af       	std	Y+57, r24	; 0x39
    2162:	89 ad       	ldd	r24, Y+57	; 0x39
    2164:	9a ad       	ldd	r25, Y+58	; 0x3a
    2166:	01 97       	sbiw	r24, 0x01	; 1
    2168:	f1 f7       	brne	.-4      	; 0x2166 <LCD_init+0x288>
    216a:	9a af       	std	Y+58, r25	; 0x3a
    216c:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);

		LCD_write_command(0x32);
    216e:	82 e3       	ldi	r24, 0x32	; 50
    2170:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_write_command>
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	a0 e8       	ldi	r26, 0x80	; 128
    217a:	bf e3       	ldi	r27, 0x3F	; 63
    217c:	8d ab       	std	Y+53, r24	; 0x35
    217e:	9e ab       	std	Y+54, r25	; 0x36
    2180:	af ab       	std	Y+55, r26	; 0x37
    2182:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2184:	6d a9       	ldd	r22, Y+53	; 0x35
    2186:	7e a9       	ldd	r23, Y+54	; 0x36
    2188:	8f a9       	ldd	r24, Y+55	; 0x37
    218a:	98 ad       	ldd	r25, Y+56	; 0x38
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	4a ef       	ldi	r20, 0xFA	; 250
    2192:	54 e4       	ldi	r21, 0x44	; 68
    2194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	89 ab       	std	Y+49, r24	; 0x31
    219e:	9a ab       	std	Y+50, r25	; 0x32
    21a0:	ab ab       	std	Y+51, r26	; 0x33
    21a2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21a4:	69 a9       	ldd	r22, Y+49	; 0x31
    21a6:	7a a9       	ldd	r23, Y+50	; 0x32
    21a8:	8b a9       	ldd	r24, Y+51	; 0x33
    21aa:	9c a9       	ldd	r25, Y+52	; 0x34
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	40 e8       	ldi	r20, 0x80	; 128
    21b2:	5f e3       	ldi	r21, 0x3F	; 63
    21b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21b8:	88 23       	and	r24, r24
    21ba:	2c f4       	brge	.+10     	; 0x21c6 <LCD_init+0x2e8>
		__ticks = 1;
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	98 ab       	std	Y+48, r25	; 0x30
    21c2:	8f a7       	std	Y+47, r24	; 0x2f
    21c4:	3f c0       	rjmp	.+126    	; 0x2244 <LCD_init+0x366>
	else if (__tmp > 65535)
    21c6:	69 a9       	ldd	r22, Y+49	; 0x31
    21c8:	7a a9       	ldd	r23, Y+50	; 0x32
    21ca:	8b a9       	ldd	r24, Y+51	; 0x33
    21cc:	9c a9       	ldd	r25, Y+52	; 0x34
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	3f ef       	ldi	r19, 0xFF	; 255
    21d2:	4f e7       	ldi	r20, 0x7F	; 127
    21d4:	57 e4       	ldi	r21, 0x47	; 71
    21d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21da:	18 16       	cp	r1, r24
    21dc:	4c f5       	brge	.+82     	; 0x2230 <LCD_init+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21de:	6d a9       	ldd	r22, Y+53	; 0x35
    21e0:	7e a9       	ldd	r23, Y+54	; 0x36
    21e2:	8f a9       	ldd	r24, Y+55	; 0x37
    21e4:	98 ad       	ldd	r25, Y+56	; 0x38
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	40 e2       	ldi	r20, 0x20	; 32
    21ec:	51 e4       	ldi	r21, 0x41	; 65
    21ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	bc 01       	movw	r22, r24
    21f8:	cd 01       	movw	r24, r26
    21fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	98 ab       	std	Y+48, r25	; 0x30
    2204:	8f a7       	std	Y+47, r24	; 0x2f
    2206:	0f c0       	rjmp	.+30     	; 0x2226 <LCD_init+0x348>
    2208:	88 ec       	ldi	r24, 0xC8	; 200
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	9e a7       	std	Y+46, r25	; 0x2e
    220e:	8d a7       	std	Y+45, r24	; 0x2d
    2210:	8d a5       	ldd	r24, Y+45	; 0x2d
    2212:	9e a5       	ldd	r25, Y+46	; 0x2e
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	f1 f7       	brne	.-4      	; 0x2214 <LCD_init+0x336>
    2218:	9e a7       	std	Y+46, r25	; 0x2e
    221a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    221c:	8f a5       	ldd	r24, Y+47	; 0x2f
    221e:	98 a9       	ldd	r25, Y+48	; 0x30
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	98 ab       	std	Y+48, r25	; 0x30
    2224:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2226:	8f a5       	ldd	r24, Y+47	; 0x2f
    2228:	98 a9       	ldd	r25, Y+48	; 0x30
    222a:	00 97       	sbiw	r24, 0x00	; 0
    222c:	69 f7       	brne	.-38     	; 0x2208 <LCD_init+0x32a>
    222e:	14 c0       	rjmp	.+40     	; 0x2258 <LCD_init+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2230:	69 a9       	ldd	r22, Y+49	; 0x31
    2232:	7a a9       	ldd	r23, Y+50	; 0x32
    2234:	8b a9       	ldd	r24, Y+51	; 0x33
    2236:	9c a9       	ldd	r25, Y+52	; 0x34
    2238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	98 ab       	std	Y+48, r25	; 0x30
    2242:	8f a7       	std	Y+47, r24	; 0x2f
    2244:	8f a5       	ldd	r24, Y+47	; 0x2f
    2246:	98 a9       	ldd	r25, Y+48	; 0x30
    2248:	9c a7       	std	Y+44, r25	; 0x2c
    224a:	8b a7       	std	Y+43, r24	; 0x2b
    224c:	8b a5       	ldd	r24, Y+43	; 0x2b
    224e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	f1 f7       	brne	.-4      	; 0x2250 <LCD_init+0x372>
    2254:	9c a7       	std	Y+44, r25	; 0x2c
    2256:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);

		LCD_write_command(0x28);
    2258:	88 e2       	ldi	r24, 0x28	; 40
    225a:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_write_command>
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	a0 e8       	ldi	r26, 0x80	; 128
    2264:	bf e3       	ldi	r27, 0x3F	; 63
    2266:	8f a3       	std	Y+39, r24	; 0x27
    2268:	98 a7       	std	Y+40, r25	; 0x28
    226a:	a9 a7       	std	Y+41, r26	; 0x29
    226c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226e:	6f a1       	ldd	r22, Y+39	; 0x27
    2270:	78 a5       	ldd	r23, Y+40	; 0x28
    2272:	89 a5       	ldd	r24, Y+41	; 0x29
    2274:	9a a5       	ldd	r25, Y+42	; 0x2a
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	4a ef       	ldi	r20, 0xFA	; 250
    227c:	54 e4       	ldi	r21, 0x44	; 68
    227e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	8b a3       	std	Y+35, r24	; 0x23
    2288:	9c a3       	std	Y+36, r25	; 0x24
    228a:	ad a3       	std	Y+37, r26	; 0x25
    228c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    228e:	6b a1       	ldd	r22, Y+35	; 0x23
    2290:	7c a1       	ldd	r23, Y+36	; 0x24
    2292:	8d a1       	ldd	r24, Y+37	; 0x25
    2294:	9e a1       	ldd	r25, Y+38	; 0x26
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	40 e8       	ldi	r20, 0x80	; 128
    229c:	5f e3       	ldi	r21, 0x3F	; 63
    229e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22a2:	88 23       	and	r24, r24
    22a4:	2c f4       	brge	.+10     	; 0x22b0 <LCD_init+0x3d2>
		__ticks = 1;
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	9a a3       	std	Y+34, r25	; 0x22
    22ac:	89 a3       	std	Y+33, r24	; 0x21
    22ae:	3f c0       	rjmp	.+126    	; 0x232e <LCD_init+0x450>
	else if (__tmp > 65535)
    22b0:	6b a1       	ldd	r22, Y+35	; 0x23
    22b2:	7c a1       	ldd	r23, Y+36	; 0x24
    22b4:	8d a1       	ldd	r24, Y+37	; 0x25
    22b6:	9e a1       	ldd	r25, Y+38	; 0x26
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	3f ef       	ldi	r19, 0xFF	; 255
    22bc:	4f e7       	ldi	r20, 0x7F	; 127
    22be:	57 e4       	ldi	r21, 0x47	; 71
    22c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22c4:	18 16       	cp	r1, r24
    22c6:	4c f5       	brge	.+82     	; 0x231a <LCD_init+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c8:	6f a1       	ldd	r22, Y+39	; 0x27
    22ca:	78 a5       	ldd	r23, Y+40	; 0x28
    22cc:	89 a5       	ldd	r24, Y+41	; 0x29
    22ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	40 e2       	ldi	r20, 0x20	; 32
    22d6:	51 e4       	ldi	r21, 0x41	; 65
    22d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	bc 01       	movw	r22, r24
    22e2:	cd 01       	movw	r24, r26
    22e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	9a a3       	std	Y+34, r25	; 0x22
    22ee:	89 a3       	std	Y+33, r24	; 0x21
    22f0:	0f c0       	rjmp	.+30     	; 0x2310 <LCD_init+0x432>
    22f2:	88 ec       	ldi	r24, 0xC8	; 200
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	98 a3       	std	Y+32, r25	; 0x20
    22f8:	8f 8f       	std	Y+31, r24	; 0x1f
    22fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22fc:	98 a1       	ldd	r25, Y+32	; 0x20
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	f1 f7       	brne	.-4      	; 0x22fe <LCD_init+0x420>
    2302:	98 a3       	std	Y+32, r25	; 0x20
    2304:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2306:	89 a1       	ldd	r24, Y+33	; 0x21
    2308:	9a a1       	ldd	r25, Y+34	; 0x22
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	9a a3       	std	Y+34, r25	; 0x22
    230e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2310:	89 a1       	ldd	r24, Y+33	; 0x21
    2312:	9a a1       	ldd	r25, Y+34	; 0x22
    2314:	00 97       	sbiw	r24, 0x00	; 0
    2316:	69 f7       	brne	.-38     	; 0x22f2 <LCD_init+0x414>
    2318:	14 c0       	rjmp	.+40     	; 0x2342 <LCD_init+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    231a:	6b a1       	ldd	r22, Y+35	; 0x23
    231c:	7c a1       	ldd	r23, Y+36	; 0x24
    231e:	8d a1       	ldd	r24, Y+37	; 0x25
    2320:	9e a1       	ldd	r25, Y+38	; 0x26
    2322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	9a a3       	std	Y+34, r25	; 0x22
    232c:	89 a3       	std	Y+33, r24	; 0x21
    232e:	89 a1       	ldd	r24, Y+33	; 0x21
    2330:	9a a1       	ldd	r25, Y+34	; 0x22
    2332:	9e 8f       	std	Y+30, r25	; 0x1e
    2334:	8d 8f       	std	Y+29, r24	; 0x1d
    2336:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2338:	9e 8d       	ldd	r25, Y+30	; 0x1e
    233a:	01 97       	sbiw	r24, 0x01	; 1
    233c:	f1 f7       	brne	.-4      	; 0x233a <LCD_init+0x45c>
    233e:	9e 8f       	std	Y+30, r25	; 0x1e
    2340:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);

		LCD_write_command(0x01);
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_write_command>
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	a0 e8       	ldi	r26, 0x80	; 128
    234e:	bf e3       	ldi	r27, 0x3F	; 63
    2350:	89 8f       	std	Y+25, r24	; 0x19
    2352:	9a 8f       	std	Y+26, r25	; 0x1a
    2354:	ab 8f       	std	Y+27, r26	; 0x1b
    2356:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2358:	69 8d       	ldd	r22, Y+25	; 0x19
    235a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    235c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    235e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	4a ef       	ldi	r20, 0xFA	; 250
    2366:	54 e4       	ldi	r21, 0x44	; 68
    2368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	8d 8b       	std	Y+21, r24	; 0x15
    2372:	9e 8b       	std	Y+22, r25	; 0x16
    2374:	af 8b       	std	Y+23, r26	; 0x17
    2376:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2378:	6d 89       	ldd	r22, Y+21	; 0x15
    237a:	7e 89       	ldd	r23, Y+22	; 0x16
    237c:	8f 89       	ldd	r24, Y+23	; 0x17
    237e:	98 8d       	ldd	r25, Y+24	; 0x18
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	40 e8       	ldi	r20, 0x80	; 128
    2386:	5f e3       	ldi	r21, 0x3F	; 63
    2388:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    238c:	88 23       	and	r24, r24
    238e:	2c f4       	brge	.+10     	; 0x239a <LCD_init+0x4bc>
		__ticks = 1;
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	9c 8b       	std	Y+20, r25	; 0x14
    2396:	8b 8b       	std	Y+19, r24	; 0x13
    2398:	3f c0       	rjmp	.+126    	; 0x2418 <LCD_init+0x53a>
	else if (__tmp > 65535)
    239a:	6d 89       	ldd	r22, Y+21	; 0x15
    239c:	7e 89       	ldd	r23, Y+22	; 0x16
    239e:	8f 89       	ldd	r24, Y+23	; 0x17
    23a0:	98 8d       	ldd	r25, Y+24	; 0x18
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	3f ef       	ldi	r19, 0xFF	; 255
    23a6:	4f e7       	ldi	r20, 0x7F	; 127
    23a8:	57 e4       	ldi	r21, 0x47	; 71
    23aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ae:	18 16       	cp	r1, r24
    23b0:	4c f5       	brge	.+82     	; 0x2404 <LCD_init+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b2:	69 8d       	ldd	r22, Y+25	; 0x19
    23b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	40 e2       	ldi	r20, 0x20	; 32
    23c0:	51 e4       	ldi	r21, 0x41	; 65
    23c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	bc 01       	movw	r22, r24
    23cc:	cd 01       	movw	r24, r26
    23ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	9c 8b       	std	Y+20, r25	; 0x14
    23d8:	8b 8b       	std	Y+19, r24	; 0x13
    23da:	0f c0       	rjmp	.+30     	; 0x23fa <LCD_init+0x51c>
    23dc:	88 ec       	ldi	r24, 0xC8	; 200
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	9a 8b       	std	Y+18, r25	; 0x12
    23e2:	89 8b       	std	Y+17, r24	; 0x11
    23e4:	89 89       	ldd	r24, Y+17	; 0x11
    23e6:	9a 89       	ldd	r25, Y+18	; 0x12
    23e8:	01 97       	sbiw	r24, 0x01	; 1
    23ea:	f1 f7       	brne	.-4      	; 0x23e8 <LCD_init+0x50a>
    23ec:	9a 8b       	std	Y+18, r25	; 0x12
    23ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f0:	8b 89       	ldd	r24, Y+19	; 0x13
    23f2:	9c 89       	ldd	r25, Y+20	; 0x14
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	9c 8b       	std	Y+20, r25	; 0x14
    23f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fa:	8b 89       	ldd	r24, Y+19	; 0x13
    23fc:	9c 89       	ldd	r25, Y+20	; 0x14
    23fe:	00 97       	sbiw	r24, 0x00	; 0
    2400:	69 f7       	brne	.-38     	; 0x23dc <LCD_init+0x4fe>
    2402:	14 c0       	rjmp	.+40     	; 0x242c <LCD_init+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2404:	6d 89       	ldd	r22, Y+21	; 0x15
    2406:	7e 89       	ldd	r23, Y+22	; 0x16
    2408:	8f 89       	ldd	r24, Y+23	; 0x17
    240a:	98 8d       	ldd	r25, Y+24	; 0x18
    240c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	9c 8b       	std	Y+20, r25	; 0x14
    2416:	8b 8b       	std	Y+19, r24	; 0x13
    2418:	8b 89       	ldd	r24, Y+19	; 0x13
    241a:	9c 89       	ldd	r25, Y+20	; 0x14
    241c:	98 8b       	std	Y+16, r25	; 0x10
    241e:	8f 87       	std	Y+15, r24	; 0x0f
    2420:	8f 85       	ldd	r24, Y+15	; 0x0f
    2422:	98 89       	ldd	r25, Y+16	; 0x10
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	f1 f7       	brne	.-4      	; 0x2424 <LCD_init+0x546>
    2428:	98 8b       	std	Y+16, r25	; 0x10
    242a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);

		LCD_write_command(0x0C);
    242c:	8c e0       	ldi	r24, 0x0C	; 12
    242e:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_write_command>
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	a0 e8       	ldi	r26, 0x80	; 128
    2438:	bf e3       	ldi	r27, 0x3F	; 63
    243a:	8b 87       	std	Y+11, r24	; 0x0b
    243c:	9c 87       	std	Y+12, r25	; 0x0c
    243e:	ad 87       	std	Y+13, r26	; 0x0d
    2440:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2442:	6b 85       	ldd	r22, Y+11	; 0x0b
    2444:	7c 85       	ldd	r23, Y+12	; 0x0c
    2446:	8d 85       	ldd	r24, Y+13	; 0x0d
    2448:	9e 85       	ldd	r25, Y+14	; 0x0e
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	4a ef       	ldi	r20, 0xFA	; 250
    2450:	54 e4       	ldi	r21, 0x44	; 68
    2452:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	8f 83       	std	Y+7, r24	; 0x07
    245c:	98 87       	std	Y+8, r25	; 0x08
    245e:	a9 87       	std	Y+9, r26	; 0x09
    2460:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2462:	6f 81       	ldd	r22, Y+7	; 0x07
    2464:	78 85       	ldd	r23, Y+8	; 0x08
    2466:	89 85       	ldd	r24, Y+9	; 0x09
    2468:	9a 85       	ldd	r25, Y+10	; 0x0a
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	40 e8       	ldi	r20, 0x80	; 128
    2470:	5f e3       	ldi	r21, 0x3F	; 63
    2472:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2476:	88 23       	and	r24, r24
    2478:	2c f4       	brge	.+10     	; 0x2484 <LCD_init+0x5a6>
		__ticks = 1;
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	9e 83       	std	Y+6, r25	; 0x06
    2480:	8d 83       	std	Y+5, r24	; 0x05
    2482:	3f c0       	rjmp	.+126    	; 0x2502 <LCD_init+0x624>
	else if (__tmp > 65535)
    2484:	6f 81       	ldd	r22, Y+7	; 0x07
    2486:	78 85       	ldd	r23, Y+8	; 0x08
    2488:	89 85       	ldd	r24, Y+9	; 0x09
    248a:	9a 85       	ldd	r25, Y+10	; 0x0a
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	3f ef       	ldi	r19, 0xFF	; 255
    2490:	4f e7       	ldi	r20, 0x7F	; 127
    2492:	57 e4       	ldi	r21, 0x47	; 71
    2494:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2498:	18 16       	cp	r1, r24
    249a:	4c f5       	brge	.+82     	; 0x24ee <LCD_init+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    249c:	6b 85       	ldd	r22, Y+11	; 0x0b
    249e:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	40 e2       	ldi	r20, 0x20	; 32
    24aa:	51 e4       	ldi	r21, 0x41	; 65
    24ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	bc 01       	movw	r22, r24
    24b6:	cd 01       	movw	r24, r26
    24b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	9e 83       	std	Y+6, r25	; 0x06
    24c2:	8d 83       	std	Y+5, r24	; 0x05
    24c4:	0f c0       	rjmp	.+30     	; 0x24e4 <LCD_init+0x606>
    24c6:	88 ec       	ldi	r24, 0xC8	; 200
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	9c 83       	std	Y+4, r25	; 0x04
    24cc:	8b 83       	std	Y+3, r24	; 0x03
    24ce:	8b 81       	ldd	r24, Y+3	; 0x03
    24d0:	9c 81       	ldd	r25, Y+4	; 0x04
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	f1 f7       	brne	.-4      	; 0x24d2 <LCD_init+0x5f4>
    24d6:	9c 83       	std	Y+4, r25	; 0x04
    24d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24da:	8d 81       	ldd	r24, Y+5	; 0x05
    24dc:	9e 81       	ldd	r25, Y+6	; 0x06
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	9e 83       	std	Y+6, r25	; 0x06
    24e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e4:	8d 81       	ldd	r24, Y+5	; 0x05
    24e6:	9e 81       	ldd	r25, Y+6	; 0x06
    24e8:	00 97       	sbiw	r24, 0x00	; 0
    24ea:	69 f7       	brne	.-38     	; 0x24c6 <LCD_init+0x5e8>
    24ec:	14 c0       	rjmp	.+40     	; 0x2516 <LCD_init+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ee:	6f 81       	ldd	r22, Y+7	; 0x07
    24f0:	78 85       	ldd	r23, Y+8	; 0x08
    24f2:	89 85       	ldd	r24, Y+9	; 0x09
    24f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	9e 83       	std	Y+6, r25	; 0x06
    2500:	8d 83       	std	Y+5, r24	; 0x05
    2502:	8d 81       	ldd	r24, Y+5	; 0x05
    2504:	9e 81       	ldd	r25, Y+6	; 0x06
    2506:	9a 83       	std	Y+2, r25	; 0x02
    2508:	89 83       	std	Y+1, r24	; 0x01
    250a:	89 81       	ldd	r24, Y+1	; 0x01
    250c:	9a 81       	ldd	r25, Y+2	; 0x02
    250e:	01 97       	sbiw	r24, 0x01	; 1
    2510:	f1 f7       	brne	.-4      	; 0x250e <LCD_init+0x630>
    2512:	9a 83       	std	Y+2, r25	; 0x02
    2514:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
#endif
}
    2516:	cc 5a       	subi	r28, 0xAC	; 172
    2518:	df 4f       	sbci	r29, 0xFF	; 255
    251a:	0f b6       	in	r0, 0x3f	; 63
    251c:	f8 94       	cli
    251e:	de bf       	out	0x3e, r29	; 62
    2520:	0f be       	out	0x3f, r0	; 63
    2522:	cd bf       	out	0x3d, r28	; 61
    2524:	cf 91       	pop	r28
    2526:	df 91       	pop	r29
    2528:	1f 91       	pop	r17
    252a:	0f 91       	pop	r16
    252c:	08 95       	ret

0000252e <LCD_write_charater>:

void LCD_write_charater(uint8 charater){
    252e:	0f 93       	push	r16
    2530:	1f 93       	push	r17
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
    253a:	c5 55       	subi	r28, 0x55	; 85
    253c:	d0 40       	sbci	r29, 0x00	; 0
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	f8 94       	cli
    2542:	de bf       	out	0x3e, r29	; 62
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	cd bf       	out	0x3d, r28	; 61
    2548:	fe 01       	movw	r30, r28
    254a:	eb 5a       	subi	r30, 0xAB	; 171
    254c:	ff 4f       	sbci	r31, 0xFF	; 255
    254e:	80 83       	st	Z, r24
	DIO_writepin(RS,HIGH);
    2550:	88 e1       	ldi	r24, 0x18	; 24
    2552:	61 e0       	ldi	r22, 0x01	; 1
    2554:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>
    2558:	fe 01       	movw	r30, r28
    255a:	ef 5a       	subi	r30, 0xAF	; 175
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	80 e0       	ldi	r24, 0x00	; 0
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	a0 e8       	ldi	r26, 0x80	; 128
    2564:	bf e3       	ldi	r27, 0x3F	; 63
    2566:	80 83       	st	Z, r24
    2568:	91 83       	std	Z+1, r25	; 0x01
    256a:	a2 83       	std	Z+2, r26	; 0x02
    256c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    256e:	8e 01       	movw	r16, r28
    2570:	03 5b       	subi	r16, 0xB3	; 179
    2572:	1f 4f       	sbci	r17, 0xFF	; 255
    2574:	fe 01       	movw	r30, r28
    2576:	ef 5a       	subi	r30, 0xAF	; 175
    2578:	ff 4f       	sbci	r31, 0xFF	; 255
    257a:	60 81       	ld	r22, Z
    257c:	71 81       	ldd	r23, Z+1	; 0x01
    257e:	82 81       	ldd	r24, Z+2	; 0x02
    2580:	93 81       	ldd	r25, Z+3	; 0x03
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	4a ef       	ldi	r20, 0xFA	; 250
    2588:	54 e4       	ldi	r21, 0x44	; 68
    258a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	f8 01       	movw	r30, r16
    2594:	80 83       	st	Z, r24
    2596:	91 83       	std	Z+1, r25	; 0x01
    2598:	a2 83       	std	Z+2, r26	; 0x02
    259a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    259c:	fe 01       	movw	r30, r28
    259e:	e3 5b       	subi	r30, 0xB3	; 179
    25a0:	ff 4f       	sbci	r31, 0xFF	; 255
    25a2:	60 81       	ld	r22, Z
    25a4:	71 81       	ldd	r23, Z+1	; 0x01
    25a6:	82 81       	ldd	r24, Z+2	; 0x02
    25a8:	93 81       	ldd	r25, Z+3	; 0x03
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	40 e8       	ldi	r20, 0x80	; 128
    25b0:	5f e3       	ldi	r21, 0x3F	; 63
    25b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25b6:	88 23       	and	r24, r24
    25b8:	44 f4       	brge	.+16     	; 0x25ca <LCD_write_charater+0x9c>
		__ticks = 1;
    25ba:	fe 01       	movw	r30, r28
    25bc:	e5 5b       	subi	r30, 0xB5	; 181
    25be:	ff 4f       	sbci	r31, 0xFF	; 255
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	91 83       	std	Z+1, r25	; 0x01
    25c6:	80 83       	st	Z, r24
    25c8:	64 c0       	rjmp	.+200    	; 0x2692 <LCD_write_charater+0x164>
	else if (__tmp > 65535)
    25ca:	fe 01       	movw	r30, r28
    25cc:	e3 5b       	subi	r30, 0xB3	; 179
    25ce:	ff 4f       	sbci	r31, 0xFF	; 255
    25d0:	60 81       	ld	r22, Z
    25d2:	71 81       	ldd	r23, Z+1	; 0x01
    25d4:	82 81       	ldd	r24, Z+2	; 0x02
    25d6:	93 81       	ldd	r25, Z+3	; 0x03
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	3f ef       	ldi	r19, 0xFF	; 255
    25dc:	4f e7       	ldi	r20, 0x7F	; 127
    25de:	57 e4       	ldi	r21, 0x47	; 71
    25e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25e4:	18 16       	cp	r1, r24
    25e6:	0c f0       	brlt	.+2      	; 0x25ea <LCD_write_charater+0xbc>
    25e8:	43 c0       	rjmp	.+134    	; 0x2670 <LCD_write_charater+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ea:	fe 01       	movw	r30, r28
    25ec:	ef 5a       	subi	r30, 0xAF	; 175
    25ee:	ff 4f       	sbci	r31, 0xFF	; 255
    25f0:	60 81       	ld	r22, Z
    25f2:	71 81       	ldd	r23, Z+1	; 0x01
    25f4:	82 81       	ldd	r24, Z+2	; 0x02
    25f6:	93 81       	ldd	r25, Z+3	; 0x03
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	40 e2       	ldi	r20, 0x20	; 32
    25fe:	51 e4       	ldi	r21, 0x41	; 65
    2600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	8e 01       	movw	r16, r28
    260a:	05 5b       	subi	r16, 0xB5	; 181
    260c:	1f 4f       	sbci	r17, 0xFF	; 255
    260e:	bc 01       	movw	r22, r24
    2610:	cd 01       	movw	r24, r26
    2612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	f8 01       	movw	r30, r16
    261c:	91 83       	std	Z+1, r25	; 0x01
    261e:	80 83       	st	Z, r24
    2620:	1f c0       	rjmp	.+62     	; 0x2660 <LCD_write_charater+0x132>
    2622:	fe 01       	movw	r30, r28
    2624:	e7 5b       	subi	r30, 0xB7	; 183
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	88 ec       	ldi	r24, 0xC8	; 200
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	91 83       	std	Z+1, r25	; 0x01
    262e:	80 83       	st	Z, r24
    2630:	fe 01       	movw	r30, r28
    2632:	e7 5b       	subi	r30, 0xB7	; 183
    2634:	ff 4f       	sbci	r31, 0xFF	; 255
    2636:	80 81       	ld	r24, Z
    2638:	91 81       	ldd	r25, Z+1	; 0x01
    263a:	01 97       	sbiw	r24, 0x01	; 1
    263c:	f1 f7       	brne	.-4      	; 0x263a <LCD_write_charater+0x10c>
    263e:	fe 01       	movw	r30, r28
    2640:	e7 5b       	subi	r30, 0xB7	; 183
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	91 83       	std	Z+1, r25	; 0x01
    2646:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2648:	de 01       	movw	r26, r28
    264a:	a5 5b       	subi	r26, 0xB5	; 181
    264c:	bf 4f       	sbci	r27, 0xFF	; 255
    264e:	fe 01       	movw	r30, r28
    2650:	e5 5b       	subi	r30, 0xB5	; 181
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	80 81       	ld	r24, Z
    2656:	91 81       	ldd	r25, Z+1	; 0x01
    2658:	01 97       	sbiw	r24, 0x01	; 1
    265a:	11 96       	adiw	r26, 0x01	; 1
    265c:	9c 93       	st	X, r25
    265e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2660:	fe 01       	movw	r30, r28
    2662:	e5 5b       	subi	r30, 0xB5	; 181
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	80 81       	ld	r24, Z
    2668:	91 81       	ldd	r25, Z+1	; 0x01
    266a:	00 97       	sbiw	r24, 0x00	; 0
    266c:	d1 f6       	brne	.-76     	; 0x2622 <LCD_write_charater+0xf4>
    266e:	27 c0       	rjmp	.+78     	; 0x26be <LCD_write_charater+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2670:	8e 01       	movw	r16, r28
    2672:	05 5b       	subi	r16, 0xB5	; 181
    2674:	1f 4f       	sbci	r17, 0xFF	; 255
    2676:	fe 01       	movw	r30, r28
    2678:	e3 5b       	subi	r30, 0xB3	; 179
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	60 81       	ld	r22, Z
    267e:	71 81       	ldd	r23, Z+1	; 0x01
    2680:	82 81       	ldd	r24, Z+2	; 0x02
    2682:	93 81       	ldd	r25, Z+3	; 0x03
    2684:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	f8 01       	movw	r30, r16
    268e:	91 83       	std	Z+1, r25	; 0x01
    2690:	80 83       	st	Z, r24
    2692:	de 01       	movw	r26, r28
    2694:	a9 5b       	subi	r26, 0xB9	; 185
    2696:	bf 4f       	sbci	r27, 0xFF	; 255
    2698:	fe 01       	movw	r30, r28
    269a:	e5 5b       	subi	r30, 0xB5	; 181
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	80 81       	ld	r24, Z
    26a0:	91 81       	ldd	r25, Z+1	; 0x01
    26a2:	8d 93       	st	X+, r24
    26a4:	9c 93       	st	X, r25
    26a6:	fe 01       	movw	r30, r28
    26a8:	e9 5b       	subi	r30, 0xB9	; 185
    26aa:	ff 4f       	sbci	r31, 0xFF	; 255
    26ac:	80 81       	ld	r24, Z
    26ae:	91 81       	ldd	r25, Z+1	; 0x01
    26b0:	01 97       	sbiw	r24, 0x01	; 1
    26b2:	f1 f7       	brne	.-4      	; 0x26b0 <LCD_write_charater+0x182>
    26b4:	fe 01       	movw	r30, r28
    26b6:	e9 5b       	subi	r30, 0xB9	; 185
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	91 83       	std	Z+1, r25	; 0x01
    26bc:	80 83       	st	Z, r24
	_delay_ms(1);
	DIO_writepin(E,LOW);
	_delay_ms(3);
#elif(LCD_MODE==MODE_4_BITS)

	DIO_writepin(E,HIGH);
    26be:	89 e1       	ldi	r24, 0x19	; 25
    26c0:	61 e0       	ldi	r22, 0x01	; 1
    26c2:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>
    26c6:	fe 01       	movw	r30, r28
    26c8:	ed 5b       	subi	r30, 0xBD	; 189
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	80 e0       	ldi	r24, 0x00	; 0
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	a0 e8       	ldi	r26, 0x80	; 128
    26d2:	bf e3       	ldi	r27, 0x3F	; 63
    26d4:	80 83       	st	Z, r24
    26d6:	91 83       	std	Z+1, r25	; 0x01
    26d8:	a2 83       	std	Z+2, r26	; 0x02
    26da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26dc:	8e 01       	movw	r16, r28
    26de:	01 5c       	subi	r16, 0xC1	; 193
    26e0:	1f 4f       	sbci	r17, 0xFF	; 255
    26e2:	fe 01       	movw	r30, r28
    26e4:	ed 5b       	subi	r30, 0xBD	; 189
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	60 81       	ld	r22, Z
    26ea:	71 81       	ldd	r23, Z+1	; 0x01
    26ec:	82 81       	ldd	r24, Z+2	; 0x02
    26ee:	93 81       	ldd	r25, Z+3	; 0x03
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	4a ef       	ldi	r20, 0xFA	; 250
    26f6:	54 e4       	ldi	r21, 0x44	; 68
    26f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	f8 01       	movw	r30, r16
    2702:	80 83       	st	Z, r24
    2704:	91 83       	std	Z+1, r25	; 0x01
    2706:	a2 83       	std	Z+2, r26	; 0x02
    2708:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    270a:	fe 01       	movw	r30, r28
    270c:	ff 96       	adiw	r30, 0x3f	; 63
    270e:	60 81       	ld	r22, Z
    2710:	71 81       	ldd	r23, Z+1	; 0x01
    2712:	82 81       	ldd	r24, Z+2	; 0x02
    2714:	93 81       	ldd	r25, Z+3	; 0x03
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	40 e8       	ldi	r20, 0x80	; 128
    271c:	5f e3       	ldi	r21, 0x3F	; 63
    271e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2722:	88 23       	and	r24, r24
    2724:	2c f4       	brge	.+10     	; 0x2730 <LCD_write_charater+0x202>
		__ticks = 1;
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	9e af       	std	Y+62, r25	; 0x3e
    272c:	8d af       	std	Y+61, r24	; 0x3d
    272e:	46 c0       	rjmp	.+140    	; 0x27bc <LCD_write_charater+0x28e>
	else if (__tmp > 65535)
    2730:	fe 01       	movw	r30, r28
    2732:	ff 96       	adiw	r30, 0x3f	; 63
    2734:	60 81       	ld	r22, Z
    2736:	71 81       	ldd	r23, Z+1	; 0x01
    2738:	82 81       	ldd	r24, Z+2	; 0x02
    273a:	93 81       	ldd	r25, Z+3	; 0x03
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	3f ef       	ldi	r19, 0xFF	; 255
    2740:	4f e7       	ldi	r20, 0x7F	; 127
    2742:	57 e4       	ldi	r21, 0x47	; 71
    2744:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2748:	18 16       	cp	r1, r24
    274a:	64 f5       	brge	.+88     	; 0x27a4 <LCD_write_charater+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274c:	fe 01       	movw	r30, r28
    274e:	ed 5b       	subi	r30, 0xBD	; 189
    2750:	ff 4f       	sbci	r31, 0xFF	; 255
    2752:	60 81       	ld	r22, Z
    2754:	71 81       	ldd	r23, Z+1	; 0x01
    2756:	82 81       	ldd	r24, Z+2	; 0x02
    2758:	93 81       	ldd	r25, Z+3	; 0x03
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	40 e2       	ldi	r20, 0x20	; 32
    2760:	51 e4       	ldi	r21, 0x41	; 65
    2762:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	bc 01       	movw	r22, r24
    276c:	cd 01       	movw	r24, r26
    276e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	9e af       	std	Y+62, r25	; 0x3e
    2778:	8d af       	std	Y+61, r24	; 0x3d
    277a:	0f c0       	rjmp	.+30     	; 0x279a <LCD_write_charater+0x26c>
    277c:	88 ec       	ldi	r24, 0xC8	; 200
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	9c af       	std	Y+60, r25	; 0x3c
    2782:	8b af       	std	Y+59, r24	; 0x3b
    2784:	8b ad       	ldd	r24, Y+59	; 0x3b
    2786:	9c ad       	ldd	r25, Y+60	; 0x3c
    2788:	01 97       	sbiw	r24, 0x01	; 1
    278a:	f1 f7       	brne	.-4      	; 0x2788 <LCD_write_charater+0x25a>
    278c:	9c af       	std	Y+60, r25	; 0x3c
    278e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2790:	8d ad       	ldd	r24, Y+61	; 0x3d
    2792:	9e ad       	ldd	r25, Y+62	; 0x3e
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	9e af       	std	Y+62, r25	; 0x3e
    2798:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    279a:	8d ad       	ldd	r24, Y+61	; 0x3d
    279c:	9e ad       	ldd	r25, Y+62	; 0x3e
    279e:	00 97       	sbiw	r24, 0x00	; 0
    27a0:	69 f7       	brne	.-38     	; 0x277c <LCD_write_charater+0x24e>
    27a2:	16 c0       	rjmp	.+44     	; 0x27d0 <LCD_write_charater+0x2a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a4:	fe 01       	movw	r30, r28
    27a6:	ff 96       	adiw	r30, 0x3f	; 63
    27a8:	60 81       	ld	r22, Z
    27aa:	71 81       	ldd	r23, Z+1	; 0x01
    27ac:	82 81       	ldd	r24, Z+2	; 0x02
    27ae:	93 81       	ldd	r25, Z+3	; 0x03
    27b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	9e af       	std	Y+62, r25	; 0x3e
    27ba:	8d af       	std	Y+61, r24	; 0x3d
    27bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    27be:	9e ad       	ldd	r25, Y+62	; 0x3e
    27c0:	9a af       	std	Y+58, r25	; 0x3a
    27c2:	89 af       	std	Y+57, r24	; 0x39
    27c4:	89 ad       	ldd	r24, Y+57	; 0x39
    27c6:	9a ad       	ldd	r25, Y+58	; 0x3a
    27c8:	01 97       	sbiw	r24, 0x01	; 1
    27ca:	f1 f7       	brne	.-4      	; 0x27c8 <LCD_write_charater+0x29a>
    27cc:	9a af       	std	Y+58, r25	; 0x3a
    27ce:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);

	DIO_writepin(LCD_DB7,GET_BIT(charater,7));
    27d0:	fe 01       	movw	r30, r28
    27d2:	eb 5a       	subi	r30, 0xAB	; 171
    27d4:	ff 4f       	sbci	r31, 0xFF	; 255
    27d6:	80 81       	ld	r24, Z
    27d8:	98 2f       	mov	r25, r24
    27da:	99 1f       	adc	r25, r25
    27dc:	99 27       	eor	r25, r25
    27de:	99 1f       	adc	r25, r25
    27e0:	83 e1       	ldi	r24, 0x13	; 19
    27e2:	69 2f       	mov	r22, r25
    27e4:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>
	DIO_writepin(LCD_DB6,GET_BIT(charater,6));
    27e8:	fe 01       	movw	r30, r28
    27ea:	eb 5a       	subi	r30, 0xAB	; 171
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	80 81       	ld	r24, Z
    27f0:	82 95       	swap	r24
    27f2:	86 95       	lsr	r24
    27f4:	86 95       	lsr	r24
    27f6:	83 70       	andi	r24, 0x03	; 3
    27f8:	98 2f       	mov	r25, r24
    27fa:	91 70       	andi	r25, 0x01	; 1
    27fc:	82 e1       	ldi	r24, 0x12	; 18
    27fe:	69 2f       	mov	r22, r25
    2800:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>
	DIO_writepin(LCD_DB5,GET_BIT(charater,5));
    2804:	fe 01       	movw	r30, r28
    2806:	eb 5a       	subi	r30, 0xAB	; 171
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	80 81       	ld	r24, Z
    280c:	82 95       	swap	r24
    280e:	86 95       	lsr	r24
    2810:	87 70       	andi	r24, 0x07	; 7
    2812:	98 2f       	mov	r25, r24
    2814:	91 70       	andi	r25, 0x01	; 1
    2816:	81 e1       	ldi	r24, 0x11	; 17
    2818:	69 2f       	mov	r22, r25
    281a:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>
	DIO_writepin(LCD_DB4,GET_BIT(charater,4));
    281e:	fe 01       	movw	r30, r28
    2820:	eb 5a       	subi	r30, 0xAB	; 171
    2822:	ff 4f       	sbci	r31, 0xFF	; 255
    2824:	80 81       	ld	r24, Z
    2826:	82 95       	swap	r24
    2828:	8f 70       	andi	r24, 0x0F	; 15
    282a:	98 2f       	mov	r25, r24
    282c:	91 70       	andi	r25, 0x01	; 1
    282e:	80 e1       	ldi	r24, 0x10	; 16
    2830:	69 2f       	mov	r22, r25
    2832:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>

	DIO_writepin(E,LOW);
    2836:	89 e1       	ldi	r24, 0x19	; 25
    2838:	60 e0       	ldi	r22, 0x00	; 0
    283a:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	a0 e8       	ldi	r26, 0x80	; 128
    2844:	bf e3       	ldi	r27, 0x3F	; 63
    2846:	8d ab       	std	Y+53, r24	; 0x35
    2848:	9e ab       	std	Y+54, r25	; 0x36
    284a:	af ab       	std	Y+55, r26	; 0x37
    284c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    284e:	6d a9       	ldd	r22, Y+53	; 0x35
    2850:	7e a9       	ldd	r23, Y+54	; 0x36
    2852:	8f a9       	ldd	r24, Y+55	; 0x37
    2854:	98 ad       	ldd	r25, Y+56	; 0x38
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	4a ef       	ldi	r20, 0xFA	; 250
    285c:	54 e4       	ldi	r21, 0x44	; 68
    285e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	89 ab       	std	Y+49, r24	; 0x31
    2868:	9a ab       	std	Y+50, r25	; 0x32
    286a:	ab ab       	std	Y+51, r26	; 0x33
    286c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    286e:	69 a9       	ldd	r22, Y+49	; 0x31
    2870:	7a a9       	ldd	r23, Y+50	; 0x32
    2872:	8b a9       	ldd	r24, Y+51	; 0x33
    2874:	9c a9       	ldd	r25, Y+52	; 0x34
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	40 e8       	ldi	r20, 0x80	; 128
    287c:	5f e3       	ldi	r21, 0x3F	; 63
    287e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2882:	88 23       	and	r24, r24
    2884:	2c f4       	brge	.+10     	; 0x2890 <LCD_write_charater+0x362>
		__ticks = 1;
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	98 ab       	std	Y+48, r25	; 0x30
    288c:	8f a7       	std	Y+47, r24	; 0x2f
    288e:	3f c0       	rjmp	.+126    	; 0x290e <LCD_write_charater+0x3e0>
	else if (__tmp > 65535)
    2890:	69 a9       	ldd	r22, Y+49	; 0x31
    2892:	7a a9       	ldd	r23, Y+50	; 0x32
    2894:	8b a9       	ldd	r24, Y+51	; 0x33
    2896:	9c a9       	ldd	r25, Y+52	; 0x34
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	3f ef       	ldi	r19, 0xFF	; 255
    289c:	4f e7       	ldi	r20, 0x7F	; 127
    289e:	57 e4       	ldi	r21, 0x47	; 71
    28a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28a4:	18 16       	cp	r1, r24
    28a6:	4c f5       	brge	.+82     	; 0x28fa <LCD_write_charater+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a8:	6d a9       	ldd	r22, Y+53	; 0x35
    28aa:	7e a9       	ldd	r23, Y+54	; 0x36
    28ac:	8f a9       	ldd	r24, Y+55	; 0x37
    28ae:	98 ad       	ldd	r25, Y+56	; 0x38
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e2       	ldi	r20, 0x20	; 32
    28b6:	51 e4       	ldi	r21, 0x41	; 65
    28b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	bc 01       	movw	r22, r24
    28c2:	cd 01       	movw	r24, r26
    28c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	98 ab       	std	Y+48, r25	; 0x30
    28ce:	8f a7       	std	Y+47, r24	; 0x2f
    28d0:	0f c0       	rjmp	.+30     	; 0x28f0 <LCD_write_charater+0x3c2>
    28d2:	88 ec       	ldi	r24, 0xC8	; 200
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	9e a7       	std	Y+46, r25	; 0x2e
    28d8:	8d a7       	std	Y+45, r24	; 0x2d
    28da:	8d a5       	ldd	r24, Y+45	; 0x2d
    28dc:	9e a5       	ldd	r25, Y+46	; 0x2e
    28de:	01 97       	sbiw	r24, 0x01	; 1
    28e0:	f1 f7       	brne	.-4      	; 0x28de <LCD_write_charater+0x3b0>
    28e2:	9e a7       	std	Y+46, r25	; 0x2e
    28e4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    28e8:	98 a9       	ldd	r25, Y+48	; 0x30
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	98 ab       	std	Y+48, r25	; 0x30
    28ee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    28f2:	98 a9       	ldd	r25, Y+48	; 0x30
    28f4:	00 97       	sbiw	r24, 0x00	; 0
    28f6:	69 f7       	brne	.-38     	; 0x28d2 <LCD_write_charater+0x3a4>
    28f8:	14 c0       	rjmp	.+40     	; 0x2922 <LCD_write_charater+0x3f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28fa:	69 a9       	ldd	r22, Y+49	; 0x31
    28fc:	7a a9       	ldd	r23, Y+50	; 0x32
    28fe:	8b a9       	ldd	r24, Y+51	; 0x33
    2900:	9c a9       	ldd	r25, Y+52	; 0x34
    2902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	98 ab       	std	Y+48, r25	; 0x30
    290c:	8f a7       	std	Y+47, r24	; 0x2f
    290e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2910:	98 a9       	ldd	r25, Y+48	; 0x30
    2912:	9c a7       	std	Y+44, r25	; 0x2c
    2914:	8b a7       	std	Y+43, r24	; 0x2b
    2916:	8b a5       	ldd	r24, Y+43	; 0x2b
    2918:	9c a5       	ldd	r25, Y+44	; 0x2c
    291a:	01 97       	sbiw	r24, 0x01	; 1
    291c:	f1 f7       	brne	.-4      	; 0x291a <LCD_write_charater+0x3ec>
    291e:	9c a7       	std	Y+44, r25	; 0x2c
    2920:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);

	DIO_writepin(E,HIGH);
    2922:	89 e1       	ldi	r24, 0x19	; 25
    2924:	61 e0       	ldi	r22, 0x01	; 1
    2926:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>
    292a:	80 e0       	ldi	r24, 0x00	; 0
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	a0 e8       	ldi	r26, 0x80	; 128
    2930:	bf e3       	ldi	r27, 0x3F	; 63
    2932:	8f a3       	std	Y+39, r24	; 0x27
    2934:	98 a7       	std	Y+40, r25	; 0x28
    2936:	a9 a7       	std	Y+41, r26	; 0x29
    2938:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    293a:	6f a1       	ldd	r22, Y+39	; 0x27
    293c:	78 a5       	ldd	r23, Y+40	; 0x28
    293e:	89 a5       	ldd	r24, Y+41	; 0x29
    2940:	9a a5       	ldd	r25, Y+42	; 0x2a
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	4a ef       	ldi	r20, 0xFA	; 250
    2948:	54 e4       	ldi	r21, 0x44	; 68
    294a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	8b a3       	std	Y+35, r24	; 0x23
    2954:	9c a3       	std	Y+36, r25	; 0x24
    2956:	ad a3       	std	Y+37, r26	; 0x25
    2958:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    295a:	6b a1       	ldd	r22, Y+35	; 0x23
    295c:	7c a1       	ldd	r23, Y+36	; 0x24
    295e:	8d a1       	ldd	r24, Y+37	; 0x25
    2960:	9e a1       	ldd	r25, Y+38	; 0x26
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	40 e8       	ldi	r20, 0x80	; 128
    2968:	5f e3       	ldi	r21, 0x3F	; 63
    296a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    296e:	88 23       	and	r24, r24
    2970:	2c f4       	brge	.+10     	; 0x297c <LCD_write_charater+0x44e>
		__ticks = 1;
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	9a a3       	std	Y+34, r25	; 0x22
    2978:	89 a3       	std	Y+33, r24	; 0x21
    297a:	3f c0       	rjmp	.+126    	; 0x29fa <LCD_write_charater+0x4cc>
	else if (__tmp > 65535)
    297c:	6b a1       	ldd	r22, Y+35	; 0x23
    297e:	7c a1       	ldd	r23, Y+36	; 0x24
    2980:	8d a1       	ldd	r24, Y+37	; 0x25
    2982:	9e a1       	ldd	r25, Y+38	; 0x26
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	3f ef       	ldi	r19, 0xFF	; 255
    2988:	4f e7       	ldi	r20, 0x7F	; 127
    298a:	57 e4       	ldi	r21, 0x47	; 71
    298c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2990:	18 16       	cp	r1, r24
    2992:	4c f5       	brge	.+82     	; 0x29e6 <LCD_write_charater+0x4b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2994:	6f a1       	ldd	r22, Y+39	; 0x27
    2996:	78 a5       	ldd	r23, Y+40	; 0x28
    2998:	89 a5       	ldd	r24, Y+41	; 0x29
    299a:	9a a5       	ldd	r25, Y+42	; 0x2a
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	40 e2       	ldi	r20, 0x20	; 32
    29a2:	51 e4       	ldi	r21, 0x41	; 65
    29a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	bc 01       	movw	r22, r24
    29ae:	cd 01       	movw	r24, r26
    29b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	9a a3       	std	Y+34, r25	; 0x22
    29ba:	89 a3       	std	Y+33, r24	; 0x21
    29bc:	0f c0       	rjmp	.+30     	; 0x29dc <LCD_write_charater+0x4ae>
    29be:	88 ec       	ldi	r24, 0xC8	; 200
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	98 a3       	std	Y+32, r25	; 0x20
    29c4:	8f 8f       	std	Y+31, r24	; 0x1f
    29c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29c8:	98 a1       	ldd	r25, Y+32	; 0x20
    29ca:	01 97       	sbiw	r24, 0x01	; 1
    29cc:	f1 f7       	brne	.-4      	; 0x29ca <LCD_write_charater+0x49c>
    29ce:	98 a3       	std	Y+32, r25	; 0x20
    29d0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d2:	89 a1       	ldd	r24, Y+33	; 0x21
    29d4:	9a a1       	ldd	r25, Y+34	; 0x22
    29d6:	01 97       	sbiw	r24, 0x01	; 1
    29d8:	9a a3       	std	Y+34, r25	; 0x22
    29da:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29dc:	89 a1       	ldd	r24, Y+33	; 0x21
    29de:	9a a1       	ldd	r25, Y+34	; 0x22
    29e0:	00 97       	sbiw	r24, 0x00	; 0
    29e2:	69 f7       	brne	.-38     	; 0x29be <LCD_write_charater+0x490>
    29e4:	14 c0       	rjmp	.+40     	; 0x2a0e <LCD_write_charater+0x4e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e6:	6b a1       	ldd	r22, Y+35	; 0x23
    29e8:	7c a1       	ldd	r23, Y+36	; 0x24
    29ea:	8d a1       	ldd	r24, Y+37	; 0x25
    29ec:	9e a1       	ldd	r25, Y+38	; 0x26
    29ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	9a a3       	std	Y+34, r25	; 0x22
    29f8:	89 a3       	std	Y+33, r24	; 0x21
    29fa:	89 a1       	ldd	r24, Y+33	; 0x21
    29fc:	9a a1       	ldd	r25, Y+34	; 0x22
    29fe:	9e 8f       	std	Y+30, r25	; 0x1e
    2a00:	8d 8f       	std	Y+29, r24	; 0x1d
    2a02:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a04:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a06:	01 97       	sbiw	r24, 0x01	; 1
    2a08:	f1 f7       	brne	.-4      	; 0x2a06 <LCD_write_charater+0x4d8>
    2a0a:	9e 8f       	std	Y+30, r25	; 0x1e
    2a0c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	DIO_writepin(LCD_DB7,GET_BIT(charater,3));
    2a0e:	fe 01       	movw	r30, r28
    2a10:	eb 5a       	subi	r30, 0xAB	; 171
    2a12:	ff 4f       	sbci	r31, 0xFF	; 255
    2a14:	80 81       	ld	r24, Z
    2a16:	86 95       	lsr	r24
    2a18:	86 95       	lsr	r24
    2a1a:	86 95       	lsr	r24
    2a1c:	98 2f       	mov	r25, r24
    2a1e:	91 70       	andi	r25, 0x01	; 1
    2a20:	83 e1       	ldi	r24, 0x13	; 19
    2a22:	69 2f       	mov	r22, r25
    2a24:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>
	DIO_writepin(LCD_DB6,GET_BIT(charater,2));
    2a28:	fe 01       	movw	r30, r28
    2a2a:	eb 5a       	subi	r30, 0xAB	; 171
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	80 81       	ld	r24, Z
    2a30:	86 95       	lsr	r24
    2a32:	86 95       	lsr	r24
    2a34:	98 2f       	mov	r25, r24
    2a36:	91 70       	andi	r25, 0x01	; 1
    2a38:	82 e1       	ldi	r24, 0x12	; 18
    2a3a:	69 2f       	mov	r22, r25
    2a3c:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>
	DIO_writepin(LCD_DB5,GET_BIT(charater,1));
    2a40:	fe 01       	movw	r30, r28
    2a42:	eb 5a       	subi	r30, 0xAB	; 171
    2a44:	ff 4f       	sbci	r31, 0xFF	; 255
    2a46:	80 81       	ld	r24, Z
    2a48:	86 95       	lsr	r24
    2a4a:	98 2f       	mov	r25, r24
    2a4c:	91 70       	andi	r25, 0x01	; 1
    2a4e:	81 e1       	ldi	r24, 0x11	; 17
    2a50:	69 2f       	mov	r22, r25
    2a52:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>
	DIO_writepin(LCD_DB4,GET_BIT(charater,0));
    2a56:	fe 01       	movw	r30, r28
    2a58:	eb 5a       	subi	r30, 0xAB	; 171
    2a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5c:	80 81       	ld	r24, Z
    2a5e:	98 2f       	mov	r25, r24
    2a60:	91 70       	andi	r25, 0x01	; 1
    2a62:	80 e1       	ldi	r24, 0x10	; 16
    2a64:	69 2f       	mov	r22, r25
    2a66:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	a0 e8       	ldi	r26, 0x80	; 128
    2a70:	bf e3       	ldi	r27, 0x3F	; 63
    2a72:	89 8f       	std	Y+25, r24	; 0x19
    2a74:	9a 8f       	std	Y+26, r25	; 0x1a
    2a76:	ab 8f       	std	Y+27, r26	; 0x1b
    2a78:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a7a:	69 8d       	ldd	r22, Y+25	; 0x19
    2a7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	4a ef       	ldi	r20, 0xFA	; 250
    2a88:	54 e4       	ldi	r21, 0x44	; 68
    2a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	8d 8b       	std	Y+21, r24	; 0x15
    2a94:	9e 8b       	std	Y+22, r25	; 0x16
    2a96:	af 8b       	std	Y+23, r26	; 0x17
    2a98:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a9a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a9c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa0:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	40 e8       	ldi	r20, 0x80	; 128
    2aa8:	5f e3       	ldi	r21, 0x3F	; 63
    2aaa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aae:	88 23       	and	r24, r24
    2ab0:	2c f4       	brge	.+10     	; 0x2abc <LCD_write_charater+0x58e>
		__ticks = 1;
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	9c 8b       	std	Y+20, r25	; 0x14
    2ab8:	8b 8b       	std	Y+19, r24	; 0x13
    2aba:	3f c0       	rjmp	.+126    	; 0x2b3a <LCD_write_charater+0x60c>
	else if (__tmp > 65535)
    2abc:	6d 89       	ldd	r22, Y+21	; 0x15
    2abe:	7e 89       	ldd	r23, Y+22	; 0x16
    2ac0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	3f ef       	ldi	r19, 0xFF	; 255
    2ac8:	4f e7       	ldi	r20, 0x7F	; 127
    2aca:	57 e4       	ldi	r21, 0x47	; 71
    2acc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ad0:	18 16       	cp	r1, r24
    2ad2:	4c f5       	brge	.+82     	; 0x2b26 <LCD_write_charater+0x5f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ad6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ad8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ada:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	40 e2       	ldi	r20, 0x20	; 32
    2ae2:	51 e4       	ldi	r21, 0x41	; 65
    2ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	bc 01       	movw	r22, r24
    2aee:	cd 01       	movw	r24, r26
    2af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	9c 8b       	std	Y+20, r25	; 0x14
    2afa:	8b 8b       	std	Y+19, r24	; 0x13
    2afc:	0f c0       	rjmp	.+30     	; 0x2b1c <LCD_write_charater+0x5ee>
    2afe:	88 ec       	ldi	r24, 0xC8	; 200
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	9a 8b       	std	Y+18, r25	; 0x12
    2b04:	89 8b       	std	Y+17, r24	; 0x11
    2b06:	89 89       	ldd	r24, Y+17	; 0x11
    2b08:	9a 89       	ldd	r25, Y+18	; 0x12
    2b0a:	01 97       	sbiw	r24, 0x01	; 1
    2b0c:	f1 f7       	brne	.-4      	; 0x2b0a <LCD_write_charater+0x5dc>
    2b0e:	9a 8b       	std	Y+18, r25	; 0x12
    2b10:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b12:	8b 89       	ldd	r24, Y+19	; 0x13
    2b14:	9c 89       	ldd	r25, Y+20	; 0x14
    2b16:	01 97       	sbiw	r24, 0x01	; 1
    2b18:	9c 8b       	std	Y+20, r25	; 0x14
    2b1a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b1c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b1e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b20:	00 97       	sbiw	r24, 0x00	; 0
    2b22:	69 f7       	brne	.-38     	; 0x2afe <LCD_write_charater+0x5d0>
    2b24:	14 c0       	rjmp	.+40     	; 0x2b4e <LCD_write_charater+0x620>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b26:	6d 89       	ldd	r22, Y+21	; 0x15
    2b28:	7e 89       	ldd	r23, Y+22	; 0x16
    2b2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	9c 8b       	std	Y+20, r25	; 0x14
    2b38:	8b 8b       	std	Y+19, r24	; 0x13
    2b3a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b3c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b3e:	98 8b       	std	Y+16, r25	; 0x10
    2b40:	8f 87       	std	Y+15, r24	; 0x0f
    2b42:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b44:	98 89       	ldd	r25, Y+16	; 0x10
    2b46:	01 97       	sbiw	r24, 0x01	; 1
    2b48:	f1 f7       	brne	.-4      	; 0x2b46 <LCD_write_charater+0x618>
    2b4a:	98 8b       	std	Y+16, r25	; 0x10
    2b4c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	DIO_writepin(E,LOW);
    2b4e:	89 e1       	ldi	r24, 0x19	; 25
    2b50:	60 e0       	ldi	r22, 0x00	; 0
    2b52:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>
    2b56:	80 e0       	ldi	r24, 0x00	; 0
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	a0 e8       	ldi	r26, 0x80	; 128
    2b5c:	bf e3       	ldi	r27, 0x3F	; 63
    2b5e:	8b 87       	std	Y+11, r24	; 0x0b
    2b60:	9c 87       	std	Y+12, r25	; 0x0c
    2b62:	ad 87       	std	Y+13, r26	; 0x0d
    2b64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b66:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b68:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	4a ef       	ldi	r20, 0xFA	; 250
    2b74:	54 e4       	ldi	r21, 0x44	; 68
    2b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	8f 83       	std	Y+7, r24	; 0x07
    2b80:	98 87       	std	Y+8, r25	; 0x08
    2b82:	a9 87       	std	Y+9, r26	; 0x09
    2b84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b86:	6f 81       	ldd	r22, Y+7	; 0x07
    2b88:	78 85       	ldd	r23, Y+8	; 0x08
    2b8a:	89 85       	ldd	r24, Y+9	; 0x09
    2b8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b8e:	20 e0       	ldi	r18, 0x00	; 0
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	40 e8       	ldi	r20, 0x80	; 128
    2b94:	5f e3       	ldi	r21, 0x3F	; 63
    2b96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b9a:	88 23       	and	r24, r24
    2b9c:	2c f4       	brge	.+10     	; 0x2ba8 <LCD_write_charater+0x67a>
		__ticks = 1;
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	9e 83       	std	Y+6, r25	; 0x06
    2ba4:	8d 83       	std	Y+5, r24	; 0x05
    2ba6:	3f c0       	rjmp	.+126    	; 0x2c26 <LCD_write_charater+0x6f8>
	else if (__tmp > 65535)
    2ba8:	6f 81       	ldd	r22, Y+7	; 0x07
    2baa:	78 85       	ldd	r23, Y+8	; 0x08
    2bac:	89 85       	ldd	r24, Y+9	; 0x09
    2bae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	3f ef       	ldi	r19, 0xFF	; 255
    2bb4:	4f e7       	ldi	r20, 0x7F	; 127
    2bb6:	57 e4       	ldi	r21, 0x47	; 71
    2bb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bbc:	18 16       	cp	r1, r24
    2bbe:	4c f5       	brge	.+82     	; 0x2c12 <LCD_write_charater+0x6e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bc8:	20 e0       	ldi	r18, 0x00	; 0
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	40 e2       	ldi	r20, 0x20	; 32
    2bce:	51 e4       	ldi	r21, 0x41	; 65
    2bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	bc 01       	movw	r22, r24
    2bda:	cd 01       	movw	r24, r26
    2bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	9e 83       	std	Y+6, r25	; 0x06
    2be6:	8d 83       	std	Y+5, r24	; 0x05
    2be8:	0f c0       	rjmp	.+30     	; 0x2c08 <LCD_write_charater+0x6da>
    2bea:	88 ec       	ldi	r24, 0xC8	; 200
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	9c 83       	std	Y+4, r25	; 0x04
    2bf0:	8b 83       	std	Y+3, r24	; 0x03
    2bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf6:	01 97       	sbiw	r24, 0x01	; 1
    2bf8:	f1 f7       	brne	.-4      	; 0x2bf6 <LCD_write_charater+0x6c8>
    2bfa:	9c 83       	std	Y+4, r25	; 0x04
    2bfc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2c00:	9e 81       	ldd	r25, Y+6	; 0x06
    2c02:	01 97       	sbiw	r24, 0x01	; 1
    2c04:	9e 83       	std	Y+6, r25	; 0x06
    2c06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c08:	8d 81       	ldd	r24, Y+5	; 0x05
    2c0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c0c:	00 97       	sbiw	r24, 0x00	; 0
    2c0e:	69 f7       	brne	.-38     	; 0x2bea <LCD_write_charater+0x6bc>
    2c10:	14 c0       	rjmp	.+40     	; 0x2c3a <LCD_write_charater+0x70c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c12:	6f 81       	ldd	r22, Y+7	; 0x07
    2c14:	78 85       	ldd	r23, Y+8	; 0x08
    2c16:	89 85       	ldd	r24, Y+9	; 0x09
    2c18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1e:	dc 01       	movw	r26, r24
    2c20:	cb 01       	movw	r24, r22
    2c22:	9e 83       	std	Y+6, r25	; 0x06
    2c24:	8d 83       	std	Y+5, r24	; 0x05
    2c26:	8d 81       	ldd	r24, Y+5	; 0x05
    2c28:	9e 81       	ldd	r25, Y+6	; 0x06
    2c2a:	9a 83       	std	Y+2, r25	; 0x02
    2c2c:	89 83       	std	Y+1, r24	; 0x01
    2c2e:	89 81       	ldd	r24, Y+1	; 0x01
    2c30:	9a 81       	ldd	r25, Y+2	; 0x02
    2c32:	01 97       	sbiw	r24, 0x01	; 1
    2c34:	f1 f7       	brne	.-4      	; 0x2c32 <LCD_write_charater+0x704>
    2c36:	9a 83       	std	Y+2, r25	; 0x02
    2c38:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif
}
    2c3a:	cb 5a       	subi	r28, 0xAB	; 171
    2c3c:	df 4f       	sbci	r29, 0xFF	; 255
    2c3e:	0f b6       	in	r0, 0x3f	; 63
    2c40:	f8 94       	cli
    2c42:	de bf       	out	0x3e, r29	; 62
    2c44:	0f be       	out	0x3f, r0	; 63
    2c46:	cd bf       	out	0x3d, r28	; 61
    2c48:	cf 91       	pop	r28
    2c4a:	df 91       	pop	r29
    2c4c:	1f 91       	pop	r17
    2c4e:	0f 91       	pop	r16
    2c50:	08 95       	ret

00002c52 <LCD_write_string>:
void LCD_write_string(uint8 *str){
    2c52:	df 93       	push	r29
    2c54:	cf 93       	push	r28
    2c56:	00 d0       	rcall	.+0      	; 0x2c58 <LCD_write_string+0x6>
    2c58:	00 d0       	rcall	.+0      	; 0x2c5a <LCD_write_string+0x8>
    2c5a:	cd b7       	in	r28, 0x3d	; 61
    2c5c:	de b7       	in	r29, 0x3e	; 62
    2c5e:	9c 83       	std	Y+4, r25	; 0x04
    2c60:	8b 83       	std	Y+3, r24	; 0x03
	//DIO_writepin(RS,HIGH);
	//_delay_ms(1);
	for(int i=0;str[i]!='\0';i++){
    2c62:	1a 82       	std	Y+2, r1	; 0x02
    2c64:	19 82       	std	Y+1, r1	; 0x01
    2c66:	0f c0       	rjmp	.+30     	; 0x2c86 <LCD_write_string+0x34>
		LCD_write_charater(str[i]);
    2c68:	29 81       	ldd	r18, Y+1	; 0x01
    2c6a:	3a 81       	ldd	r19, Y+2	; 0x02
    2c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c70:	fc 01       	movw	r30, r24
    2c72:	e2 0f       	add	r30, r18
    2c74:	f3 1f       	adc	r31, r19
    2c76:	80 81       	ld	r24, Z
    2c78:	0e 94 97 12 	call	0x252e	; 0x252e <LCD_write_charater>
#endif
}
void LCD_write_string(uint8 *str){
	//DIO_writepin(RS,HIGH);
	//_delay_ms(1);
	for(int i=0;str[i]!='\0';i++){
    2c7c:	89 81       	ldd	r24, Y+1	; 0x01
    2c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c80:	01 96       	adiw	r24, 0x01	; 1
    2c82:	9a 83       	std	Y+2, r25	; 0x02
    2c84:	89 83       	std	Y+1, r24	; 0x01
    2c86:	29 81       	ldd	r18, Y+1	; 0x01
    2c88:	3a 81       	ldd	r19, Y+2	; 0x02
    2c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c8e:	fc 01       	movw	r30, r24
    2c90:	e2 0f       	add	r30, r18
    2c92:	f3 1f       	adc	r31, r19
    2c94:	80 81       	ld	r24, Z
    2c96:	88 23       	and	r24, r24
    2c98:	39 f7       	brne	.-50     	; 0x2c68 <LCD_write_string+0x16>
		LCD_write_charater(str[i]);
	}
}
    2c9a:	0f 90       	pop	r0
    2c9c:	0f 90       	pop	r0
    2c9e:	0f 90       	pop	r0
    2ca0:	0f 90       	pop	r0
    2ca2:	cf 91       	pop	r28
    2ca4:	df 91       	pop	r29
    2ca6:	08 95       	ret

00002ca8 <LCD_write_number>:

void LCD_write_number(sint32 number){
    2ca8:	0f 93       	push	r16
    2caa:	1f 93       	push	r17
    2cac:	df 93       	push	r29
    2cae:	cf 93       	push	r28
    2cb0:	cd b7       	in	r28, 0x3d	; 61
    2cb2:	de b7       	in	r29, 0x3e	; 62
    2cb4:	61 97       	sbiw	r28, 0x11	; 17
    2cb6:	0f b6       	in	r0, 0x3f	; 63
    2cb8:	f8 94       	cli
    2cba:	de bf       	out	0x3e, r29	; 62
    2cbc:	0f be       	out	0x3f, r0	; 63
    2cbe:	cd bf       	out	0x3d, r28	; 61
    2cc0:	6e 87       	std	Y+14, r22	; 0x0e
    2cc2:	7f 87       	std	Y+15, r23	; 0x0f
    2cc4:	88 8b       	std	Y+16, r24	; 0x10
    2cc6:	99 8b       	std	Y+17, r25	; 0x11
	uint8 num_digits[10];
	uint8 i=0;
    2cc8:	1b 82       	std	Y+3, r1	; 0x03
    2cca:	2e c0       	rjmp	.+92     	; 0x2d28 <LCD_write_number+0x80>
	while(number!=0){
		num_digits[i++]=number%10+'0';
    2ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cce:	08 2f       	mov	r16, r24
    2cd0:	10 e0       	ldi	r17, 0x00	; 0
    2cd2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cd4:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cd6:	a8 89       	ldd	r26, Y+16	; 0x10
    2cd8:	b9 89       	ldd	r27, Y+17	; 0x11
    2cda:	2a e0       	ldi	r18, 0x0A	; 10
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	40 e0       	ldi	r20, 0x00	; 0
    2ce0:	50 e0       	ldi	r21, 0x00	; 0
    2ce2:	bc 01       	movw	r22, r24
    2ce4:	cd 01       	movw	r24, r26
    2ce6:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <__divmodsi4>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	28 2f       	mov	r18, r24
    2cf0:	20 5d       	subi	r18, 0xD0	; 208
    2cf2:	ce 01       	movw	r24, r28
    2cf4:	04 96       	adiw	r24, 0x04	; 4
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	e0 0f       	add	r30, r16
    2cfa:	f1 1f       	adc	r31, r17
    2cfc:	20 83       	st	Z, r18
    2cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2d00:	8f 5f       	subi	r24, 0xFF	; 255
    2d02:	8b 83       	std	Y+3, r24	; 0x03
		number/=10;
    2d04:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d06:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d08:	a8 89       	ldd	r26, Y+16	; 0x10
    2d0a:	b9 89       	ldd	r27, Y+17	; 0x11
    2d0c:	2a e0       	ldi	r18, 0x0A	; 10
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	40 e0       	ldi	r20, 0x00	; 0
    2d12:	50 e0       	ldi	r21, 0x00	; 0
    2d14:	bc 01       	movw	r22, r24
    2d16:	cd 01       	movw	r24, r26
    2d18:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <__divmodsi4>
    2d1c:	da 01       	movw	r26, r20
    2d1e:	c9 01       	movw	r24, r18
    2d20:	8e 87       	std	Y+14, r24	; 0x0e
    2d22:	9f 87       	std	Y+15, r25	; 0x0f
    2d24:	a8 8b       	std	Y+16, r26	; 0x10
    2d26:	b9 8b       	std	Y+17, r27	; 0x11
}

void LCD_write_number(sint32 number){
	uint8 num_digits[10];
	uint8 i=0;
	while(number!=0){
    2d28:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d2a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d2c:	a8 89       	ldd	r26, Y+16	; 0x10
    2d2e:	b9 89       	ldd	r27, Y+17	; 0x11
    2d30:	00 97       	sbiw	r24, 0x00	; 0
    2d32:	a1 05       	cpc	r26, r1
    2d34:	b1 05       	cpc	r27, r1
    2d36:	51 f6       	brne	.-108    	; 0x2ccc <LCD_write_number+0x24>
		num_digits[i++]=number%10+'0';
		number/=10;
	}

    for(int j=i-1;j>=0;j--){
    2d38:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3a:	88 2f       	mov	r24, r24
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	9a 83       	std	Y+2, r25	; 0x02
    2d42:	89 83       	std	Y+1, r24	; 0x01
    2d44:	0f c0       	rjmp	.+30     	; 0x2d64 <LCD_write_number+0xbc>
	     LCD_write_charater(num_digits[j]);
    2d46:	29 81       	ldd	r18, Y+1	; 0x01
    2d48:	3a 81       	ldd	r19, Y+2	; 0x02
    2d4a:	ce 01       	movw	r24, r28
    2d4c:	04 96       	adiw	r24, 0x04	; 4
    2d4e:	fc 01       	movw	r30, r24
    2d50:	e2 0f       	add	r30, r18
    2d52:	f3 1f       	adc	r31, r19
    2d54:	80 81       	ld	r24, Z
    2d56:	0e 94 97 12 	call	0x252e	; 0x252e <LCD_write_charater>
	while(number!=0){
		num_digits[i++]=number%10+'0';
		number/=10;
	}

    for(int j=i-1;j>=0;j--){
    2d5a:	89 81       	ldd	r24, Y+1	; 0x01
    2d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d5e:	01 97       	sbiw	r24, 0x01	; 1
    2d60:	9a 83       	std	Y+2, r25	; 0x02
    2d62:	89 83       	std	Y+1, r24	; 0x01
    2d64:	89 81       	ldd	r24, Y+1	; 0x01
    2d66:	9a 81       	ldd	r25, Y+2	; 0x02
    2d68:	99 23       	and	r25, r25
    2d6a:	6c f7       	brge	.-38     	; 0x2d46 <LCD_write_number+0x9e>
	     LCD_write_charater(num_digits[j]);
	}
}
    2d6c:	61 96       	adiw	r28, 0x11	; 17
    2d6e:	0f b6       	in	r0, 0x3f	; 63
    2d70:	f8 94       	cli
    2d72:	de bf       	out	0x3e, r29	; 62
    2d74:	0f be       	out	0x3f, r0	; 63
    2d76:	cd bf       	out	0x3d, r28	; 61
    2d78:	cf 91       	pop	r28
    2d7a:	df 91       	pop	r29
    2d7c:	1f 91       	pop	r17
    2d7e:	0f 91       	pop	r16
    2d80:	08 95       	ret

00002d82 <LCD_goto>:

void LCD_goto(uint8 row,uint8 col){
    2d82:	df 93       	push	r29
    2d84:	cf 93       	push	r28
    2d86:	00 d0       	rcall	.+0      	; 0x2d88 <LCD_goto+0x6>
    2d88:	0f 92       	push	r0
    2d8a:	cd b7       	in	r28, 0x3d	; 61
    2d8c:	de b7       	in	r29, 0x3e	; 62
    2d8e:	8a 83       	std	Y+2, r24	; 0x02
    2d90:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address=0x80;
    2d92:	80 e8       	ldi	r24, 0x80	; 128
    2d94:	89 83       	std	Y+1, r24	; 0x01
	if(row==0){
    2d96:	8a 81       	ldd	r24, Y+2	; 0x02
    2d98:	88 23       	and	r24, r24
    2d9a:	31 f4       	brne	.+12     	; 0x2da8 <LCD_goto+0x26>
		LCD_write_command(address+col);
    2d9c:	89 81       	ldd	r24, Y+1	; 0x01
    2d9e:	9b 81       	ldd	r25, Y+3	; 0x03
    2da0:	89 0f       	add	r24, r25
    2da2:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_write_command>
    2da6:	06 c0       	rjmp	.+12     	; 0x2db4 <LCD_goto+0x32>
	}else {
		LCD_write_command(address+col+0x40);
    2da8:	99 81       	ldd	r25, Y+1	; 0x01
    2daa:	8b 81       	ldd	r24, Y+3	; 0x03
    2dac:	89 0f       	add	r24, r25
    2dae:	80 5c       	subi	r24, 0xC0	; 192
    2db0:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_write_command>
	}
}
    2db4:	0f 90       	pop	r0
    2db6:	0f 90       	pop	r0
    2db8:	0f 90       	pop	r0
    2dba:	cf 91       	pop	r28
    2dbc:	df 91       	pop	r29
    2dbe:	08 95       	ret

00002dc0 <LCD_write_string_goto>:


void LCD_write_string_goto(uint8 *str,uint8 row,uint8 col){
    2dc0:	df 93       	push	r29
    2dc2:	cf 93       	push	r28
    2dc4:	00 d0       	rcall	.+0      	; 0x2dc6 <LCD_write_string_goto+0x6>
    2dc6:	00 d0       	rcall	.+0      	; 0x2dc8 <LCD_write_string_goto+0x8>
    2dc8:	cd b7       	in	r28, 0x3d	; 61
    2dca:	de b7       	in	r29, 0x3e	; 62
    2dcc:	9a 83       	std	Y+2, r25	; 0x02
    2dce:	89 83       	std	Y+1, r24	; 0x01
    2dd0:	6b 83       	std	Y+3, r22	; 0x03
    2dd2:	4c 83       	std	Y+4, r20	; 0x04
	LCD_goto(row,col);
    2dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd6:	6c 81       	ldd	r22, Y+4	; 0x04
    2dd8:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <LCD_goto>
	LCD_write_string(str);
    2ddc:	89 81       	ldd	r24, Y+1	; 0x01
    2dde:	9a 81       	ldd	r25, Y+2	; 0x02
    2de0:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_write_string>
}
    2de4:	0f 90       	pop	r0
    2de6:	0f 90       	pop	r0
    2de8:	0f 90       	pop	r0
    2dea:	0f 90       	pop	r0
    2dec:	cf 91       	pop	r28
    2dee:	df 91       	pop	r29
    2df0:	08 95       	ret

00002df2 <LCD_clear>:

void LCD_clear(){
    2df2:	df 93       	push	r29
    2df4:	cf 93       	push	r28
    2df6:	cd b7       	in	r28, 0x3d	; 61
    2df8:	de b7       	in	r29, 0x3e	; 62
LCD_write_command(0X01);
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_write_command>
}
    2e00:	cf 91       	pop	r28
    2e02:	df 91       	pop	r29
    2e04:	08 95       	ret

00002e06 <keypad_init>:
 */

#include "KEYPAD.h"


void keypad_init(void){
    2e06:	df 93       	push	r29
    2e08:	cf 93       	push	r28
    2e0a:	0f 92       	push	r0
    2e0c:	cd b7       	in	r28, 0x3d	; 61
    2e0e:	de b7       	in	r29, 0x3e	; 62
	for(uint8 i=0;i<NUMBER_OF_ROWS;i++){
    2e10:	19 82       	std	Y+1, r1	; 0x01
    2e12:	08 c0       	rjmp	.+16     	; 0x2e24 <keypad_init+0x1e>
			DIO_writepin(ROW1+i,HIGH);
    2e14:	89 81       	ldd	r24, Y+1	; 0x01
    2e16:	80 5f       	subi	r24, 0xF0	; 240
    2e18:	61 e0       	ldi	r22, 0x01	; 1
    2e1a:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>

#include "KEYPAD.h"


void keypad_init(void){
	for(uint8 i=0;i<NUMBER_OF_ROWS;i++){
    2e1e:	89 81       	ldd	r24, Y+1	; 0x01
    2e20:	8f 5f       	subi	r24, 0xFF	; 255
    2e22:	89 83       	std	Y+1, r24	; 0x01
    2e24:	89 81       	ldd	r24, Y+1	; 0x01
    2e26:	84 30       	cpi	r24, 0x04	; 4
    2e28:	a8 f3       	brcs	.-22     	; 0x2e14 <keypad_init+0xe>
			DIO_writepin(ROW1+i,HIGH);
		}
}
    2e2a:	0f 90       	pop	r0
    2e2c:	cf 91       	pop	r28
    2e2e:	df 91       	pop	r29
    2e30:	08 95       	ret

00002e32 <Keypad_getkey>:

uint8 Keypad_getkey(void){
    2e32:	df 93       	push	r29
    2e34:	cf 93       	push	r28
    2e36:	00 d0       	rcall	.+0      	; 0x2e38 <Keypad_getkey+0x6>
    2e38:	0f 92       	push	r0
    2e3a:	cd b7       	in	r28, 0x3d	; 61
    2e3c:	de b7       	in	r29, 0x3e	; 62

	uint8 key;
		for(uint8 i=0;i<NUMBER_OF_ROWS;i++){
    2e3e:	1a 82       	std	Y+2, r1	; 0x02
    2e40:	33 c0       	rjmp	.+102    	; 0x2ea8 <Keypad_getkey+0x76>
			DIO_writepin(ROW1+i,LOW);
    2e42:	8a 81       	ldd	r24, Y+2	; 0x02
    2e44:	80 5f       	subi	r24, 0xF0	; 240
    2e46:	60 e0       	ldi	r22, 0x00	; 0
    2e48:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>
			for(uint8 j=0;j<NUMBER_OF_COLS;j++){
    2e4c:	19 82       	std	Y+1, r1	; 0x01
    2e4e:	21 c0       	rjmp	.+66     	; 0x2e92 <Keypad_getkey+0x60>
				if(DIO_readpin(COL1+j)==LOW)
    2e50:	89 81       	ldd	r24, Y+1	; 0x01
    2e52:	84 5e       	subi	r24, 0xE4	; 228
    2e54:	0e 94 04 0a 	call	0x1408	; 0x1408 <DIO_readpin>
    2e58:	88 23       	and	r24, r24
    2e5a:	91 f4       	brne	.+36     	; 0x2e80 <Keypad_getkey+0x4e>
			   key= arr[i][j];
    2e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5e:	48 2f       	mov	r20, r24
    2e60:	50 e0       	ldi	r21, 0x00	; 0
    2e62:	89 81       	ldd	r24, Y+1	; 0x01
    2e64:	28 2f       	mov	r18, r24
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	ca 01       	movw	r24, r20
    2e6a:	88 0f       	add	r24, r24
    2e6c:	99 1f       	adc	r25, r25
    2e6e:	88 0f       	add	r24, r24
    2e70:	99 1f       	adc	r25, r25
    2e72:	82 0f       	add	r24, r18
    2e74:	93 1f       	adc	r25, r19
    2e76:	fc 01       	movw	r30, r24
    2e78:	e8 57       	subi	r30, 0x78	; 120
    2e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7c:	80 81       	ld	r24, Z
    2e7e:	8b 83       	std	Y+3, r24	; 0x03
				while(DIO_readpin(COL1+j)==LOW);
    2e80:	89 81       	ldd	r24, Y+1	; 0x01
    2e82:	84 5e       	subi	r24, 0xE4	; 228
    2e84:	0e 94 04 0a 	call	0x1408	; 0x1408 <DIO_readpin>
    2e88:	88 23       	and	r24, r24
    2e8a:	d1 f3       	breq	.-12     	; 0x2e80 <Keypad_getkey+0x4e>
uint8 Keypad_getkey(void){

	uint8 key;
		for(uint8 i=0;i<NUMBER_OF_ROWS;i++){
			DIO_writepin(ROW1+i,LOW);
			for(uint8 j=0;j<NUMBER_OF_COLS;j++){
    2e8c:	89 81       	ldd	r24, Y+1	; 0x01
    2e8e:	8f 5f       	subi	r24, 0xFF	; 255
    2e90:	89 83       	std	Y+1, r24	; 0x01
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	84 30       	cpi	r24, 0x04	; 4
    2e96:	e0 f2       	brcs	.-72     	; 0x2e50 <Keypad_getkey+0x1e>
				if(DIO_readpin(COL1+j)==LOW)
			   key= arr[i][j];
				while(DIO_readpin(COL1+j)==LOW);
			}
			DIO_writepin(ROW1+i,HIGH);
    2e98:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9a:	80 5f       	subi	r24, 0xF0	; 240
    2e9c:	61 e0       	ldi	r22, 0x01	; 1
    2e9e:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>
}

uint8 Keypad_getkey(void){

	uint8 key;
		for(uint8 i=0;i<NUMBER_OF_ROWS;i++){
    2ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea4:	8f 5f       	subi	r24, 0xFF	; 255
    2ea6:	8a 83       	std	Y+2, r24	; 0x02
    2ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eaa:	84 30       	cpi	r24, 0x04	; 4
    2eac:	50 f2       	brcs	.-108    	; 0x2e42 <Keypad_getkey+0x10>
			   key= arr[i][j];
				while(DIO_readpin(COL1+j)==LOW);
			}
			DIO_writepin(ROW1+i,HIGH);
		}
		return key;
    2eae:	8b 81       	ldd	r24, Y+3	; 0x03

}
    2eb0:	0f 90       	pop	r0
    2eb2:	0f 90       	pop	r0
    2eb4:	0f 90       	pop	r0
    2eb6:	cf 91       	pop	r28
    2eb8:	df 91       	pop	r29
    2eba:	08 95       	ret

00002ebc <main>:
#include "EXI_interface.h"

#include "avr/interrupt.h"


int main(){
    2ebc:	df 93       	push	r29
    2ebe:	cf 93       	push	r28
    2ec0:	cd b7       	in	r28, 0x3d	; 61
    2ec2:	de b7       	in	r29, 0x3e	; 62

DIO_initall();
    2ec4:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_initall>
	EXI_INIT(INT0,Any_Logical_Level);
    2ec8:	86 e0       	ldi	r24, 0x06	; 6
    2eca:	61 e0       	ldi	r22, 0x01	; 1
    2ecc:	0e 94 a3 05 	call	0xb46	; 0xb46 <EXI_INIT>
	EXI_INIT(INT1,Any_Logical_Level);
    2ed0:	87 e0       	ldi	r24, 0x07	; 7
    2ed2:	61 e0       	ldi	r22, 0x01	; 1
    2ed4:	0e 94 a3 05 	call	0xb46	; 0xb46 <EXI_INIT>
	EXI_ENABLE(INT0);
    2ed8:	86 e0       	ldi	r24, 0x06	; 6
    2eda:	0e 94 ae 06 	call	0xd5c	; 0xd5c <EXI_ENABLE>
	EXI_ENABLE(INT1);
    2ede:	87 e0       	ldi	r24, 0x07	; 7
    2ee0:	0e 94 ae 06 	call	0xd5c	; 0xd5c <EXI_ENABLE>
sei();
    2ee4:	78 94       	sei
    2ee6:	ff cf       	rjmp	.-2      	; 0x2ee6 <main+0x2a>

00002ee8 <__vector_1>:
}



ISR(INT0_vect)
{
    2ee8:	1f 92       	push	r1
    2eea:	0f 92       	push	r0
    2eec:	0f b6       	in	r0, 0x3f	; 63
    2eee:	0f 92       	push	r0
    2ef0:	11 24       	eor	r1, r1
    2ef2:	2f 93       	push	r18
    2ef4:	3f 93       	push	r19
    2ef6:	4f 93       	push	r20
    2ef8:	5f 93       	push	r21
    2efa:	6f 93       	push	r22
    2efc:	7f 93       	push	r23
    2efe:	8f 93       	push	r24
    2f00:	9f 93       	push	r25
    2f02:	af 93       	push	r26
    2f04:	bf 93       	push	r27
    2f06:	ef 93       	push	r30
    2f08:	ff 93       	push	r31
    2f0a:	df 93       	push	r29
    2f0c:	cf 93       	push	r28
    2f0e:	cd b7       	in	r28, 0x3d	; 61
    2f10:	de b7       	in	r29, 0x3e	; 62
	DIO_writepin(0,HIGH);
    2f12:	80 e0       	ldi	r24, 0x00	; 0
    2f14:	61 e0       	ldi	r22, 0x01	; 1
    2f16:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>

/*static uint8 x=0;
x=x^1;
DIO_writepin(0,x);*/
}
    2f1a:	cf 91       	pop	r28
    2f1c:	df 91       	pop	r29
    2f1e:	ff 91       	pop	r31
    2f20:	ef 91       	pop	r30
    2f22:	bf 91       	pop	r27
    2f24:	af 91       	pop	r26
    2f26:	9f 91       	pop	r25
    2f28:	8f 91       	pop	r24
    2f2a:	7f 91       	pop	r23
    2f2c:	6f 91       	pop	r22
    2f2e:	5f 91       	pop	r21
    2f30:	4f 91       	pop	r20
    2f32:	3f 91       	pop	r19
    2f34:	2f 91       	pop	r18
    2f36:	0f 90       	pop	r0
    2f38:	0f be       	out	0x3f, r0	; 63
    2f3a:	0f 90       	pop	r0
    2f3c:	1f 90       	pop	r1
    2f3e:	18 95       	reti

00002f40 <__vector_2>:

ISR(INT1_vect)
{
    2f40:	1f 92       	push	r1
    2f42:	0f 92       	push	r0
    2f44:	0f b6       	in	r0, 0x3f	; 63
    2f46:	0f 92       	push	r0
    2f48:	11 24       	eor	r1, r1
    2f4a:	2f 93       	push	r18
    2f4c:	3f 93       	push	r19
    2f4e:	4f 93       	push	r20
    2f50:	5f 93       	push	r21
    2f52:	6f 93       	push	r22
    2f54:	7f 93       	push	r23
    2f56:	8f 93       	push	r24
    2f58:	9f 93       	push	r25
    2f5a:	af 93       	push	r26
    2f5c:	bf 93       	push	r27
    2f5e:	ef 93       	push	r30
    2f60:	ff 93       	push	r31
    2f62:	df 93       	push	r29
    2f64:	cf 93       	push	r28
    2f66:	cd b7       	in	r28, 0x3d	; 61
    2f68:	de b7       	in	r29, 0x3e	; 62
	static uint8 x=0;
	x=x^1;
    2f6a:	90 91 98 00 	lds	r25, 0x0098
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	89 27       	eor	r24, r25
    2f72:	80 93 98 00 	sts	0x0098, r24
	DIO_writepin(1,x);
    2f76:	90 91 98 00 	lds	r25, 0x0098
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	69 2f       	mov	r22, r25
    2f7e:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_writepin>
}
    2f82:	cf 91       	pop	r28
    2f84:	df 91       	pop	r29
    2f86:	ff 91       	pop	r31
    2f88:	ef 91       	pop	r30
    2f8a:	bf 91       	pop	r27
    2f8c:	af 91       	pop	r26
    2f8e:	9f 91       	pop	r25
    2f90:	8f 91       	pop	r24
    2f92:	7f 91       	pop	r23
    2f94:	6f 91       	pop	r22
    2f96:	5f 91       	pop	r21
    2f98:	4f 91       	pop	r20
    2f9a:	3f 91       	pop	r19
    2f9c:	2f 91       	pop	r18
    2f9e:	0f 90       	pop	r0
    2fa0:	0f be       	out	0x3f, r0	; 63
    2fa2:	0f 90       	pop	r0
    2fa4:	1f 90       	pop	r1
    2fa6:	18 95       	reti

00002fa8 <__divmodsi4>:
    2fa8:	97 fb       	bst	r25, 7
    2faa:	09 2e       	mov	r0, r25
    2fac:	05 26       	eor	r0, r21
    2fae:	0e d0       	rcall	.+28     	; 0x2fcc <__divmodsi4_neg1>
    2fb0:	57 fd       	sbrc	r21, 7
    2fb2:	04 d0       	rcall	.+8      	; 0x2fbc <__divmodsi4_neg2>
    2fb4:	14 d0       	rcall	.+40     	; 0x2fde <__udivmodsi4>
    2fb6:	0a d0       	rcall	.+20     	; 0x2fcc <__divmodsi4_neg1>
    2fb8:	00 1c       	adc	r0, r0
    2fba:	38 f4       	brcc	.+14     	; 0x2fca <__divmodsi4_exit>

00002fbc <__divmodsi4_neg2>:
    2fbc:	50 95       	com	r21
    2fbe:	40 95       	com	r20
    2fc0:	30 95       	com	r19
    2fc2:	21 95       	neg	r18
    2fc4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fc6:	4f 4f       	sbci	r20, 0xFF	; 255
    2fc8:	5f 4f       	sbci	r21, 0xFF	; 255

00002fca <__divmodsi4_exit>:
    2fca:	08 95       	ret

00002fcc <__divmodsi4_neg1>:
    2fcc:	f6 f7       	brtc	.-4      	; 0x2fca <__divmodsi4_exit>
    2fce:	90 95       	com	r25
    2fd0:	80 95       	com	r24
    2fd2:	70 95       	com	r23
    2fd4:	61 95       	neg	r22
    2fd6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fd8:	8f 4f       	sbci	r24, 0xFF	; 255
    2fda:	9f 4f       	sbci	r25, 0xFF	; 255
    2fdc:	08 95       	ret

00002fde <__udivmodsi4>:
    2fde:	a1 e2       	ldi	r26, 0x21	; 33
    2fe0:	1a 2e       	mov	r1, r26
    2fe2:	aa 1b       	sub	r26, r26
    2fe4:	bb 1b       	sub	r27, r27
    2fe6:	fd 01       	movw	r30, r26
    2fe8:	0d c0       	rjmp	.+26     	; 0x3004 <__udivmodsi4_ep>

00002fea <__udivmodsi4_loop>:
    2fea:	aa 1f       	adc	r26, r26
    2fec:	bb 1f       	adc	r27, r27
    2fee:	ee 1f       	adc	r30, r30
    2ff0:	ff 1f       	adc	r31, r31
    2ff2:	a2 17       	cp	r26, r18
    2ff4:	b3 07       	cpc	r27, r19
    2ff6:	e4 07       	cpc	r30, r20
    2ff8:	f5 07       	cpc	r31, r21
    2ffa:	20 f0       	brcs	.+8      	; 0x3004 <__udivmodsi4_ep>
    2ffc:	a2 1b       	sub	r26, r18
    2ffe:	b3 0b       	sbc	r27, r19
    3000:	e4 0b       	sbc	r30, r20
    3002:	f5 0b       	sbc	r31, r21

00003004 <__udivmodsi4_ep>:
    3004:	66 1f       	adc	r22, r22
    3006:	77 1f       	adc	r23, r23
    3008:	88 1f       	adc	r24, r24
    300a:	99 1f       	adc	r25, r25
    300c:	1a 94       	dec	r1
    300e:	69 f7       	brne	.-38     	; 0x2fea <__udivmodsi4_loop>
    3010:	60 95       	com	r22
    3012:	70 95       	com	r23
    3014:	80 95       	com	r24
    3016:	90 95       	com	r25
    3018:	9b 01       	movw	r18, r22
    301a:	ac 01       	movw	r20, r24
    301c:	bd 01       	movw	r22, r26
    301e:	cf 01       	movw	r24, r30
    3020:	08 95       	ret

00003022 <__prologue_saves__>:
    3022:	2f 92       	push	r2
    3024:	3f 92       	push	r3
    3026:	4f 92       	push	r4
    3028:	5f 92       	push	r5
    302a:	6f 92       	push	r6
    302c:	7f 92       	push	r7
    302e:	8f 92       	push	r8
    3030:	9f 92       	push	r9
    3032:	af 92       	push	r10
    3034:	bf 92       	push	r11
    3036:	cf 92       	push	r12
    3038:	df 92       	push	r13
    303a:	ef 92       	push	r14
    303c:	ff 92       	push	r15
    303e:	0f 93       	push	r16
    3040:	1f 93       	push	r17
    3042:	cf 93       	push	r28
    3044:	df 93       	push	r29
    3046:	cd b7       	in	r28, 0x3d	; 61
    3048:	de b7       	in	r29, 0x3e	; 62
    304a:	ca 1b       	sub	r28, r26
    304c:	db 0b       	sbc	r29, r27
    304e:	0f b6       	in	r0, 0x3f	; 63
    3050:	f8 94       	cli
    3052:	de bf       	out	0x3e, r29	; 62
    3054:	0f be       	out	0x3f, r0	; 63
    3056:	cd bf       	out	0x3d, r28	; 61
    3058:	09 94       	ijmp

0000305a <__epilogue_restores__>:
    305a:	2a 88       	ldd	r2, Y+18	; 0x12
    305c:	39 88       	ldd	r3, Y+17	; 0x11
    305e:	48 88       	ldd	r4, Y+16	; 0x10
    3060:	5f 84       	ldd	r5, Y+15	; 0x0f
    3062:	6e 84       	ldd	r6, Y+14	; 0x0e
    3064:	7d 84       	ldd	r7, Y+13	; 0x0d
    3066:	8c 84       	ldd	r8, Y+12	; 0x0c
    3068:	9b 84       	ldd	r9, Y+11	; 0x0b
    306a:	aa 84       	ldd	r10, Y+10	; 0x0a
    306c:	b9 84       	ldd	r11, Y+9	; 0x09
    306e:	c8 84       	ldd	r12, Y+8	; 0x08
    3070:	df 80       	ldd	r13, Y+7	; 0x07
    3072:	ee 80       	ldd	r14, Y+6	; 0x06
    3074:	fd 80       	ldd	r15, Y+5	; 0x05
    3076:	0c 81       	ldd	r16, Y+4	; 0x04
    3078:	1b 81       	ldd	r17, Y+3	; 0x03
    307a:	aa 81       	ldd	r26, Y+2	; 0x02
    307c:	b9 81       	ldd	r27, Y+1	; 0x01
    307e:	ce 0f       	add	r28, r30
    3080:	d1 1d       	adc	r29, r1
    3082:	0f b6       	in	r0, 0x3f	; 63
    3084:	f8 94       	cli
    3086:	de bf       	out	0x3e, r29	; 62
    3088:	0f be       	out	0x3f, r0	; 63
    308a:	cd bf       	out	0x3d, r28	; 61
    308c:	ed 01       	movw	r28, r26
    308e:	08 95       	ret

00003090 <_exit>:
    3090:	f8 94       	cli

00003092 <__stop_program>:
    3092:	ff cf       	rjmp	.-2      	; 0x3092 <__stop_program>
